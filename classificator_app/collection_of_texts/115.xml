<?xml version="1.0" ?>
<doc>
	<original_author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[JetBrains]]></item>
	</original_author>
	<label auto="true" type="str" verify="true"><![CDATA[Develop]]></label>
	<author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Zafir]]></item>
	</author>
	<date auto="true" type="str" verify="true"><![CDATA[2022-12-14, 15:18]]></date>
	<link auto="true" type="str" verify="true"><![CDATA[https://habr.com/ru/post/705480/]]></link>
	<title auto="true" type="str" verify="true"><![CDATA[Создание веб-приложения на Ktor. Часть 1]]></title>
	<categories auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Kotlin]]></item>
	</categories>
	<key_words auto="true" type="list" verify="true">
		<item type="str"><![CDATA[kotlin]]></item>
		<item type="str"><![CDATA[ktor]]></item>
		<item type="str"><![CDATA[ktor client]]></item>
		<item type="str"><![CDATA[web-application]]></item>
		<item type="str"><![CDATA[web]]></item>
		<item type="str"><![CDATA[api]]></item>
	</key_words>
	<text auto="true" type="str" verify="true"><![CDATA[Окончательный проект
Что такое Ktor?
Ktor — это асинхронная платформа для создания микросервисов, веб-приложений и многого другого, написанная на Kotlin.
Предпосылки
Прежде, чем начать этот урок:
Установите Intellij IDEA.
Убедитесь, что плагин Ktor установлен и включен (для удобной работы с фреймворком).
Создание нового проекта
Чтобы создать новый проект Ktor, откройте Intellij IDEA и выполните следующие действия:
На экране приветствия щелкните New Project.
Далее выбираем из левого списка Ktor.
На правой панели вы можете указать следующие параметры: .
Name: укажите название проекта.
Location: укажите каталог для вашего проекта.
Build system: выберите желаемую систему сборки.
Website: укажите домен, используемый для создания имени пакета.
Artifact: в этом поле отображается сгенерированное имя артефакта.
Ktor version: выберите нужную версию Ktor.
Engine: Выберите движок, используемый для запуска сервера.
Configuration in: Выберите, следует ли указывать конфигурацию сервера в коде или в файле HOCON.
Add sample code: оставьте этот параметр включенным, чтобы добавить образец кода для подключаемых модулей, добавленных на следующей странице.
В этом руководстве мы оставляем значения по умолчанию для этих параметров. Нажмите Next, чтобы перейти на следующую страницу.
4. На следующей странице вы можете выбрать набор плагинов — строительных блоков, обеспечивающих общую функциональность приложения Ktor, например, аутентификацию, сериализацию и кодирование контента, сжатие, поддержку файлов cookie и так далее.
А пока давайте установим только плагин Routing для обработки входящих запросов. Начните вводить routing в верхнем левом поле поиска, найдите Routing в списке и нажмите Add.
Нажмите Create и подождите, пока IntelliJ IDEA создаст проект и установит зависимости.
Теперь мы готовы запустить созданное приложение.
Запуск приложения Ktor
Чтобы запустить созданное приложение Ktor, выполните следующие действия:
Вызовите представление Project и откройте файл Application.kt , расположенный по следующему пути: src /main /kotlin /com /example/ Application.kt
В файл Application.kt автоматически добавляется следующий код:
package com.example

import io.ktor.server.engine.*
import io.ktor.server.netty.*
import com.example.plugins.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        configureRouting()
    }.start(wait = true)
}
Основные части этого кода:
Функция embeddedServer используется для настройки параметров сервера в коде и запуска приложения.
configureRouting является функцией расширения, определяющей маршрутизацию . Эта функция объявлена в отдельном пакетпе plugins (файл Routing.kt ).
package com.example.plugins

import io.ktor.server.routing.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.request.*

fun Application.configureRouting() {

    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
}
Функция getвнутри routingблока получает запросы GET, сделанные по пути / , и отвечает простым текстовым ответом.
Чтобы запустить приложение, щелкните на значок рядом с main функцией и выберите run ApplicationKt .
Подождите, пока Intellij IDEA запустит приложение. В окне инструмента Run должно появиться следующее сообщение:
[main] INFO ktor.application - Responding at http://0.0.0.0:8080
Это означает, что сервер готов принимать запросы по адресу http://0.0.0.0:8080 . Вы можете щелкнуть эту ссылку, чтобы открыть приложение в браузере по умолчанию:
Протестируйте приложение Ktor
Теперь протестируем созданное приложение:
Откройте файл ApplicationTest.kt , расположенный по следующему пути: src /test /kotlin /com /example/ ApplicationTest.kt . В этом файле функция testApplication используется для выполнения запроса GET к / и проверки состояния и содержимого ответа.
Чтобы запустить тест, щелкните на значок рядом с функцией testRoot и выберите run ApplicationTest.test .
Подождите, пока IntelliJ IDEA выполнит тест и отобразит результаты в окне инструмента Run.
В дальнейшем планирую выпускать ещё статьи по данному фреймворку. Окончательный проект Окончательный проект Что такое Ktor? Ktor — это асинхронная платформа для создания микросервисов, веб-приложений и многого другого, написанная на Kotlin. Ktor Предпосылки Прежде, чем начать этот урок: Установите Intellij IDEA.
Убедитесь, что плагин Ktor установлен и включен (для удобной работы с фреймворком). Установите Intellij IDEA. Установите Intellij IDEA. Убедитесь, что плагин Ktor установлен и включен (для удобной работы с фреймворком). Убедитесь, что плагин Ktor установлен и включен (для удобной работы с фреймворком). Создание нового проекта Чтобы создать новый проект Ktor, откройте Intellij IDEA и выполните следующие действия: На экране приветствия щелкните New Project.
Далее выбираем из левого списка Ktor.
На правой панели вы можете указать следующие параметры: . На экране приветствия щелкните New Project. На экране приветствия щелкните New Project. New Project. Далее выбираем из левого списка Ktor. Далее выбираем из левого списка Ktor. выбираем Ktor На правой панели вы можете указать следующие параметры: . На правой панели вы можете указать следующие параметры: .   Name: укажите название проекта.
Location: укажите каталог для вашего проекта.
Build system: выберите желаемую систему сборки.
Website: укажите домен, используемый для создания имени пакета.
Artifact: в этом поле отображается сгенерированное имя артефакта.
Ktor version: выберите нужную версию Ktor.
Engine: Выберите движок, используемый для запуска сервера.
Configuration in: Выберите, следует ли указывать конфигурацию сервера в коде или в файле HOCON.
Add sample code: оставьте этот параметр включенным, чтобы добавить образец кода для подключаемых модулей, добавленных на следующей странице.
В этом руководстве мы оставляем значения по умолчанию для этих параметров. Нажмите Next, чтобы перейти на следующую страницу. Name: укажите название проекта. Name: укажите название проекта. Name Location: укажите каталог для вашего проекта. Location: укажите каталог для вашего проекта. Location Build system: выберите желаемую систему сборки. Build system: выберите желаемую систему сборки. Build system Website: укажите домен, используемый для создания имени пакета. Website: укажите домен, используемый для создания имени пакета. Website Artifact: в этом поле отображается сгенерированное имя артефакта. Artifact: в этом поле отображается сгенерированное имя артефакта. Artifact Ktor version: выберите нужную версию Ktor. Ktor version: выберите нужную версию Ktor. Ktor version Engine: Выберите движок, используемый для запуска сервера. Engine: Выберите движок, используемый для запуска сервера. Engine Configuration in: Выберите, следует ли указывать конфигурацию сервера в коде или в файле HOCON. Configuration in: Выберите, следует ли указывать конфигурацию сервера в коде или в файле HOCON. Configuration in Add sample code: оставьте этот параметр включенным, чтобы добавить образец кода для подключаемых модулей, добавленных на следующей странице.
В этом руководстве мы оставляем значения по умолчанию для этих параметров. Нажмите Next, чтобы перейти на следующую страницу. Add sample code: оставьте этот параметр включенным, чтобы добавить образец кода для подключаемых модулей, добавленных на следующей странице. Add sample code В этом руководстве мы оставляем значения по умолчанию для этих параметров. Нажмите Next, чтобы перейти на следующую страницу. Next 4. На следующей странице вы можете выбрать набор плагинов — строительных блоков, обеспечивающих общую функциональность приложения Ktor, например, аутентификацию, сериализацию и кодирование контента, сжатие, поддержку файлов cookie и так далее.   А пока давайте установим только плагин Routing для обработки входящих запросов. Начните вводить routing в верхнем левом поле поиска, найдите Routing в списке и нажмите Add. Routing routing Routing Add   Нажмите Create и подождите, пока IntelliJ IDEA создаст проект и установит зависимости. Create Теперь мы готовы запустить созданное приложение. Запуск приложения Ktor Чтобы запустить созданное приложение Ktor, выполните следующие действия: Вызовите представление Project и откройте файл Application.kt , расположенный по следующему пути: src /main /kotlin /com /example/ Application.kt Вызовите представление Project и откройте файл Application.kt , расположенный по следующему пути: src /main /kotlin /com /example/ Application.kt Вызовите представление Project и откройте файл Application.kt , расположенный по следующему пути: src /main /kotlin /com /example/ Application.kt Project Application.kt src /main /kotlin /com /example/ Application.kt В файл Application.kt автоматически добавляется следующий код: В файл Application.kt автоматически добавляется следующий код: В файл Application.kt автоматически добавляется следующий код: Application.kt : package com.example

import io.ktor.server.engine.*
import io.ktor.server.netty.*
import com.example.plugins.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        configureRouting()
    }.start(wait = true)
} package com.example

import io.ktor.server.engine.*
import io.ktor.server.netty.*
import com.example.plugins.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        configureRouting()
    }.start(wait = true)
} Основные части этого кода: Функция embeddedServer используется для настройки параметров сервера в коде и запуска приложения.
configureRouting является функцией расширения, определяющей маршрутизацию . Эта функция объявлена в отдельном пакетпе plugins (файл Routing.kt ). Функция embeddedServer используется для настройки параметров сервера в коде и запуска приложения. Функция embeddedServer используется для настройки параметров сервера в коде и запуска приложения. embeddedServer configureRouting является функцией расширения, определяющей маршрутизацию . Эта функция объявлена в отдельном пакетпе plugins (файл Routing.kt ). configureRouting является функцией расширения, определяющей маршрутизацию . Эта функция объявлена в отдельном пакетпе plugins (файл Routing.kt ). configureRouting маршрутизацию plugins Routing.kt package com.example.plugins

import io.ktor.server.routing.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.request.*

fun Application.configureRouting() {

    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
} package com.example.plugins

import io.ktor.server.routing.*
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.request.*

fun Application.configureRouting() {

    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
} Функция getвнутри routingблока получает запросы GET, сделанные по пути / , и отвечает простым текстовым ответом. get routing Чтобы запустить приложение, щелкните на значок рядом с main функцией и выберите run ApplicationKt . Чтобы запустить приложение, щелкните на значок рядом с main функцией и выберите run ApplicationKt . Чтобы запустить приложение, щелкните на значок рядом с main функцией и выберите run ApplicationKt . main run ApplicationKt   Подождите, пока Intellij IDEA запустит приложение. В окне инструмента Run должно появиться следующее сообщение:
[main] INFO ktor.application - Responding at http://0.0.0.0:8080
Это означает, что сервер готов принимать запросы по адресу http://0.0.0.0:8080 . Вы можете щелкнуть эту ссылку, чтобы открыть приложение в браузере по умолчанию: Подождите, пока Intellij IDEA запустит приложение. В окне инструмента Run должно появиться следующее сообщение:
[main] INFO ktor.application - Responding at http://0.0.0.0:8080
Это означает, что сервер готов принимать запросы по адресу http://0.0.0.0:8080 . Вы можете щелкнуть эту ссылку, чтобы открыть приложение в браузере по умолчанию: Подождите, пока Intellij IDEA запустит приложение. В окне инструмента Run должно появиться следующее сообщение: Run [main] INFO ktor.application - Responding at http://0.0.0.0:8080 [main] INFO ktor.application - Responding at http://0.0.0.0:8080 Это означает, что сервер готов принимать запросы по адресу http://0.0.0.0:8080 . Вы можете щелкнуть эту ссылку, чтобы открыть приложение в браузере по умолчанию: http://0.0.0.0:8080   Протестируйте приложение Ktor Теперь протестируем созданное приложение: Откройте файл ApplicationTest.kt , расположенный по следующему пути: src /test /kotlin /com /example/ ApplicationTest.kt . В этом файле функция testApplication используется для выполнения запроса GET к / и проверки состояния и содержимого ответа.
Чтобы запустить тест, щелкните на значок рядом с функцией testRoot и выберите run ApplicationTest.test . Откройте файл ApplicationTest.kt , расположенный по следующему пути: src /test /kotlin /com /example/ ApplicationTest.kt . В этом файле функция testApplication используется для выполнения запроса GET к / и проверки состояния и содержимого ответа. Откройте файл ApplicationTest.kt , расположенный по следующему пути: src /test /kotlin /com /example/ ApplicationTest.kt . В этом файле функция testApplication используется для выполнения запроса GET к / и проверки состояния и содержимого ответа. ApplicationTest.kt src /test /kotlin /com /example/ ApplicationTest.kt testApplication / Чтобы запустить тест, щелкните на значок рядом с функцией testRoot и выберите run ApplicationTest.test . Чтобы запустить тест, щелкните на значок рядом с функцией testRoot и выберите run ApplicationTest.test . testRoot run ApplicationTest.test   Подождите, пока IntelliJ IDEA выполнит тест и отобразит результаты в окне инструмента Run. Подождите, пока IntelliJ IDEA выполнит тест и отобразит результаты в окне инструмента Run. Подождите, пока IntelliJ IDEA выполнит тест и отобразит результаты в окне инструмента Run. Run   В дальнейшем планирую выпускать ещё статьи по данному фреймворку. ]]></text>
</doc>

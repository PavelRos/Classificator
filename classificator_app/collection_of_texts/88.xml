<?xml version="1.0" ?>
<doc>
	<label auto="true" type="str" verify="true"><![CDATA[Develop]]></label>
	<author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[CyberLympha]]></item>
	</author>
	<date auto="true" type="str" verify="true"><![CDATA[2022-12-15, 09:38]]></date>
	<link auto="true" type="str" verify="true"><![CDATA[https://habr.com/ru/post/705114/]]></link>
	<title auto="true" type="str" verify="true"><![CDATA[Виртуализация]]></title>
	<categories auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Виртуализация]]></item>
		<item type="str"><![CDATA[Машинное обучение]]></item>
	</categories>
	<key_words auto="true" type="list" verify="true">
		<item type="str"><![CDATA[ml]]></item>
		<item type="str"><![CDATA[виртуализация]]></item>
		<item type="str"><![CDATA[виртуальная машина]]></item>
		<item type="str"><![CDATA[обучающий материал]]></item>
	</key_words>
	<text auto="true" type="str" verify="true"><![CDATA[Цикл статей "Инженерия машинного обучения"
Этой статьей мы начинаем публикацию цикла материалов, посвященных созданию и управлению инфраструктурой для проектов машинного обучения (MLOps), который основан на лекциях совместного учебного курса УрФУ и компании СайберЛимфа "Инженерия машинного обучения" [1]. Мы планируем в ближайших статьях кратко рассмотреть отдельные темы этого курса: виртуализация, автоматизация работы с данными, инструменты для создания пайплайнов, CI/CD для ML, средства мониторинга и контроля. При изложении акцент будет сделан на практическом применении, в том числе на инструментах для решения задач MLOps, например: Jenkins, Ansible, dvc, Airflow, MLFlow и другие. Конечно же изложение вышеуказанных тем будет кратким, в "формате habr", достаточным для формирования у читателя понимания того, как и зачем пользоваться тем или иным инструментом, однако недостаточным для того, чтобы сразу после прочтения статьи приступить к выполнению производственных задач. Конечно же, для этого требуется практика и более системное изучение инструментария и имеющихся подходов. И если вам интересно продолжать совершенствование в этом направлении, то рекомендуем обратиться к курсу "Инженерия машинного обучения" УрФУ, в котором представленные в статьях темы рассматриваются более глубоко, а также многочисленным источникам по теме: книгам, тематическим каналам, видеолекциям. Также мы планируем учитывать обратную связь от читателей и рассказывать о том, что может быть востребовано в ваших проектах. Пожалуйста, пишите пожелания в комментариях или напрямую авторам.
Вступление
Большинство проектов машинного обучения не выходят в промышленную эксплуатацию ("продакшн").  Одним из способов исправить ситуацию является качественная организация всей инфраструктуры проекта машинного обучения, решающая задачи проекта: сбор и обработка данных, эксперименты с данными и моделями, обучение моделей, хранение артефактов разных этапов проекта, сборка, тестирование и вывод решения в производственную среду. В классической разработке программного обеспечения подобные задачи решает инженер DevOps. Концепция DevOps для проектов машинного обучения называется MLOps (Machine Learning Operations). Содержание работы, инструменты и необходимые навыки инженера MLOps очень похожи на DevOps. Однако, из-за специфики проектов машинного обучения, спектр задач и инструментов для их решения в MLOps гораздо шире.
Интерес к MLOps обусловлен тем, что эти навыки сейчас очень востребованы в большом количестве проектов, использующих машинное обучение. Благодаря различным курсам, соревнованиям и хакатонам, тематическим часам и open-source проектам, сейчас сформировано большое сообщество ML специалистов (инженеров, программистов, исследователей, ученых). Базовые вещи в машинном обучении можно освоить быстро: сбор и обработка данных, создание и обучение простых и не очень моделей. Однако столь же быстро приходит понимание, что кроме разработки самой модели необходимо уделять внимание выводу этой модели в продакшн. Поэтому сейчас спрос на MLOps специалистов гораздо выше, чем на ML программистов, а уж если ML программист обладает навыками MLOps, то он вообще является "золотым кадром" для HR и любого подразделения, занимающегося машинным обучением. Сложность в освоении MLOps заключается в том, что нет строгого перечня инструментов и методик, освоив которые можно гарантированно стать MLOps инженером. Для каждого проекта и для каждого предприятия набор таких требований может быть разным. Например, в крупной компании, где все процессы строго регламентированы, MLOps инженер может выполнять небольшой перечень задач с использованием типового инструментария, а в небольшом стартапе, где "все занимаются всем", MLOps инженер активно участвует на всех этапах создания продукта, начиная от архитектуры и заканчивая эксплуатацией. В зависимости от конкретного проекта от MLOps инженера могут потребоваться навыки написания скриптов автоматизации, программирования, работы с базами данных, проектирования API, тестирования, администрирования linux, понимания принципов создания и обучения моделей ML, и множество других. Не претендуя на то, чтобы научить слушателей курса "Инженерия машинного обучения" [1] всем существующим в ИТ технологиям, мы сосредоточились на наиболее популярных инструментах, а также на концепциях и типовых задачах MLOps, о которых коротко расскажем в цикле материалов, а более подробно можно узнать об этом на курсе.
Тема 1: Виртуализация
Одной из частых бед в проектах разработки программного обеспечения является несовместимость разных библиотек, используемых в проекте. Это же в полной мере относится и к проектам ML. Для машинного обучения разработано множество open-source инструментов (библиотек, фреймворков), что само по себе очень круто и конечно же положительно повлияло на взрывной рост разработок в области ML. Однако каждый из этих инструментов разрабатывается по собственной стратегии, разными командами разработчиков с разной квалификацией, по разным дорожным картам. Разные библиотеки развиваются и меняют версии с разной скоростью, что приводит к несовместимости. Такие проблемы сложно быстро диагностировать, а иногда и вообще невозможно. Почти всегда, встретив подобную проблему, разработчик отправляется на stackoverflow. Чтобы избежать несовместимости отдельных компонентов ПО в проектах ML в работе с моделями машинного обучения на всех этапах проекта много внимания уделяют строгому контролю версий всех компонентов используемого программного обеспечения и системных настроек среды, в которой выполняется программа. Основная цель состоит в том, чтобы можно было быстро повторить результат эксперимента. Это можно сделать с использованием выделенных сред выполнения программ, среди которых наиболее популярными являются виртуальные машины и контейнеры приложений.
Архитектура программного обеспечения подстраивается под эти подходы, отдавая предпочтение все более популярной идеологии микросервисной архитектуры программного обеспечения, соответствующей разделению общего монолитного решения на отдельные независимые компоненты. Подробно это рассматривается в курсе магистратуры УрФУ "Инженерия машинного обучения" (1 семестр) [2].
Из этой статьи вы узнаете:
зачем нужны изолированные среды выполнения программ и какие есть подходы для их создания;
что такое виртуальные машины, как их создавать и использовать.
Термин “виртуализация” стал очень популярным благодаря развивающимся технологиям облачных вычислений. Появились облачные сервисы, предоставляющие услуги доступа к виртуальным аппаратным и программным ресурсам таким образом, что для пользователя это выглядит как работа с локальным компьютером или сервером. Такой подход эффективен тем, что позволяет оптимально использовать имеющиеся аппаратные ресурсы:
вычислительные процессоры:
центральный процессор (CPU, Central Processing Unit);
графический процессор (GPU, Graphics Processing Unit);
тензорный процессор (TPU, Tensor Processing Unit);
оперативную память;
средства сетевого обмена информацией;
средства хранения информации, жесткие и оптические диски;
виртуальные программные комплексы, которые можно использовать "из коробки" в облаке.
При виртуализации имеющиеся аппаратные ресурсы разделяются на логические виртуальные сущности для того, чтобы создать несколько изолированных друг от друга процессов, пользующихся виртуальными ресурсами независимо друг от друга. Это позволяет оптимально распределить между изолированными процессами нагрузку на имеющиеся “физические” аппаратные мощности, избежать простоя и непроизводительного использования ресурсов, повышает рентабельность вложений в аппаратное обеспечение. Изолированный процесс, пользующийся виртуальными ресурсами, называется виртуальная машина.
Разделение аппаратных ресурсов между виртуальными машинами.
Виртуальная машина имеет свою операционную систему и работает как независимый компьютер. Кроме того, виртуальная машина имеет свои уникальные характеристики мощности процессора и объема памяти, в одних системах нужен большой объем оперативной памяти, а в других предъявляются повышенные требования к скорости вычислений. При планировании ресурсов виртуальных мощностей надо учитывать их суммарный объем “виртуальных мощностей”, сопоставляя с возможностями “физического” аппаратного обеспечения. Понятно, что виртуальные машины, которые не загружены на всю мощность, могут по очереди пользоваться "физическими" ресурсами, при этом их совокупные характеристики в сумме будут больше "физических", в этом и заключается преимущество виртуализации для разделения ограниченного ресурса. Однако если по характеру решаемых задач виртуальные машины часто будут задействовать мощности, близкие к пиковым (например, для вычислений), то необходимо это учесть при планировании. В современных кластерах одновременно может работать много виртуальных машин, поэтому актуален вопрос управления и мониторинга. Система, управляющая виртуальными машинами, называется гипервизор. Оборудование, на котором работает виртуализация, называется хост, его операционная система - хостовой. В противоположность этому, гостевые операционные системы — это операционные системы, работающие в виртуальных машинах, пользующиеся ресурсами хоста. Гостевые операционные системы работают с эмуляцией аппаратных ресурсов.
Основная роль гипервизора состоит в координации работы виртуальных машин и физического оборудования хоста при предоставлении виртуальным машинам доступа к физическим ресурсам. Также гипервизор изолирует виртуальные машины друг от друга, чтобы они не конфликтовали за память или вычислительный ресурс.
Роль гипервизора в координации доступа виртуальных машин к ресурсам.
По такой схеме работают все системы виртуализации, отличаясь между собой в технических деталях и реализации. Вот, например, схема работы гипервизора Hyper-V, который входит в состав Microsoft Windows.
Архитектура работы гипервизора Hyper-V, схема с официального сайта https://docs.microsoft.com/ru-ru/virtualization/hyper-v-on-windows/about/.
Основные преимущества технологии виртуализации:
оптимальное использование аппаратных ресурсов:
Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя.
Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели.
дополнительные возможности обеспечения безопасности:
Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему.
Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя.
быстрое развертывание:
Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение.
Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы.
Как видите, технологии виртуализации поддерживают тренд в разработке и использовании программного обеспечения, обеспечивая скорость выполнения операций и надежность.
Примеры гипервизоров виртуальных машин:
VirtualBox компании Oracle, пока еще бесплатный инструмент для виртуализации серверов,
VMware, коммерческий инструмент, обеспечивает виртуализацию серверов, рабочих столов (desktops), хранилищ данных. К сожалению, компания прекратила свою деятельность в России [3],
Hyper-V, входит в состав ОС Microsoft Windows, предоставляет решения по виртуализации серверов и рабочих компьютеров,
zVirt,
Proxmox,
отечественная платформа "Базис", см. например [4].
Конечно, список инструментов для виртуализации гораздо шире. В конечном счете специалисты DevOps/MLOps выбирают наиболее оптимальные инструменты, руководствуясь необходимыми функциями, производительностью, стоимостью решения.
Как и почти любая новая полезная технология, виртуализация порождает и новые проблемы с безопасностью. Например, если злоумышленник взломает гипервизор, то он может получить контроль над всеми виртуальными машинами и их операционными системами. Эту проблему будет сложно диагностировать с помощью традиционных средств защиты, так как гипервизоры "не видны" как со стороны самой виртуальной машины, так и со стороны сети, поскольку взаимодействие виртуальных машин друг с другом организуется без участия физической сети. Поэтому необходимо применять продукты для безопасности виртуализации, способные сканировать и исправлять виртуальные машины, зараженные вредоносным кодом, шифровать все виртуальные диски виртуальных машин и контролировать доступ к ним.
Кроме рассмотренной виртуализации серверов, рабочих компьютеров, процессоров и систем хранения данных еще существуют технологии виртуализации сетей, приложений, отдельных компонентов программной системы или даже больших комплексных решений, например ЦОДов. Основные преимущества подхода точно такие же, как мы рассмотрели, быстрая настройка и конфигурирование, простота в эксплуатации, гибкое управление и надежность.
А теперь давайте попробуем познакомиться с возможностями виртуализации на конкретном примере. Предупреждение: если вы матерый инженер, который виртуальные машины поднимает на завтрак, настраивает на обед и восстанавливает на ужин, то дальше вы не найдете для себя чего-либо нового. Начиная со следующего абзаца, текст под катом предназначен для тех, кто только начинает свое знакомство со средствами виртуализации.
Создание виртуальной машины в VirtualBox.
До новых встреч!
Список литературы Цикл статей "Инженерия машинного обучения" Этой статьей мы начинаем публикацию цикла материалов, посвященных созданию и управлению инфраструктурой для проектов машинного обучения (MLOps), который основан на лекциях совместного учебного курса УрФУ и компании СайберЛимфа "Инженерия машинного обучения" [1]. Мы планируем в ближайших статьях кратко рассмотреть отдельные темы этого курса: виртуализация, автоматизация работы с данными, инструменты для создания пайплайнов, CI/CD для ML, средства мониторинга и контроля. При изложении акцент будет сделан на практическом применении, в том числе на инструментах для решения задач MLOps, например: Jenkins, Ansible, dvc, Airflow, MLFlow и другие. Конечно же изложение вышеуказанных тем будет кратким, в "формате habr", достаточным для формирования у читателя понимания того, как и зачем пользоваться тем или иным инструментом, однако недостаточным для того, чтобы сразу после прочтения статьи приступить к выполнению производственных задач. Конечно же, для этого требуется практика и более системное изучение инструментария и имеющихся подходов. И если вам интересно продолжать совершенствование в этом направлении, то рекомендуем обратиться к курсу "Инженерия машинного обучения" УрФУ, в котором представленные в статьях темы рассматриваются более глубоко, а также многочисленным источникам по теме: книгам, тематическим каналам, видеолекциям. Также мы планируем учитывать обратную связь от читателей и рассказывать о том, что может быть востребовано в ваших проектах. Пожалуйста, пишите пожелания в комментариях или напрямую авторам. [1] Вступление Большинство проектов машинного обучения не выходят в промышленную эксплуатацию ("продакшн").  Одним из способов исправить ситуацию является качественная организация всей инфраструктуры проекта машинного обучения, решающая задачи проекта: сбор и обработка данных, эксперименты с данными и моделями, обучение моделей, хранение артефактов разных этапов проекта, сборка, тестирование и вывод решения в производственную среду. В классической разработке программного обеспечения подобные задачи решает инженер DevOps. Концепция DevOps для проектов машинного обучения называется MLOps (Machine Learning Operations). Содержание работы, инструменты и необходимые навыки инженера MLOps очень похожи на DevOps. Однако, из-за специфики проектов машинного обучения, спектр задач и инструментов для их решения в MLOps гораздо шире. Интерес к MLOps обусловлен тем, что эти навыки сейчас очень востребованы в большом количестве проектов, использующих машинное обучение. Благодаря различным курсам, соревнованиям и хакатонам, тематическим часам и open-source проектам, сейчас сформировано большое сообщество ML специалистов (инженеров, программистов, исследователей, ученых). Базовые вещи в машинном обучении можно освоить быстро: сбор и обработка данных, создание и обучение простых и не очень моделей. Однако столь же быстро приходит понимание, что кроме разработки самой модели необходимо уделять внимание выводу этой модели в продакшн. Поэтому сейчас спрос на MLOps специалистов гораздо выше, чем на ML программистов, а уж если ML программист обладает навыками MLOps, то он вообще является "золотым кадром" для HR и любого подразделения, занимающегося машинным обучением. Сложность в освоении MLOps заключается в том, что нет строгого перечня инструментов и методик, освоив которые можно гарантированно стать MLOps инженером. Для каждого проекта и для каждого предприятия набор таких требований может быть разным. Например, в крупной компании, где все процессы строго регламентированы, MLOps инженер может выполнять небольшой перечень задач с использованием типового инструментария, а в небольшом стартапе, где "все занимаются всем", MLOps инженер активно участвует на всех этапах создания продукта, начиная от архитектуры и заканчивая эксплуатацией. В зависимости от конкретного проекта от MLOps инженера могут потребоваться навыки написания скриптов автоматизации, программирования, работы с базами данных, проектирования API, тестирования, администрирования linux, понимания принципов создания и обучения моделей ML, и множество других. Не претендуя на то, чтобы научить слушателей курса "Инженерия машинного обучения" [1] всем существующим в ИТ технологиям, мы сосредоточились на наиболее популярных инструментах, а также на концепциях и типовых задачах MLOps, о которых коротко расскажем в цикле материалов, а более подробно можно узнать об этом на курсе. [1] Тема 1: Виртуализация Одной из частых бед в проектах разработки программного обеспечения является несовместимость разных библиотек, используемых в проекте. Это же в полной мере относится и к проектам ML. Для машинного обучения разработано множество open-source инструментов (библиотек, фреймворков), что само по себе очень круто и конечно же положительно повлияло на взрывной рост разработок в области ML. Однако каждый из этих инструментов разрабатывается по собственной стратегии, разными командами разработчиков с разной квалификацией, по разным дорожным картам. Разные библиотеки развиваются и меняют версии с разной скоростью, что приводит к несовместимости. Такие проблемы сложно быстро диагностировать, а иногда и вообще невозможно. Почти всегда, встретив подобную проблему, разработчик отправляется на stackoverflow. Чтобы избежать несовместимости отдельных компонентов ПО в проектах ML в работе с моделями машинного обучения на всех этапах проекта много внимания уделяют строгому контролю версий всех компонентов используемого программного обеспечения и системных настроек среды, в которой выполняется программа. Основная цель состоит в том, чтобы можно было быстро повторить результат эксперимента. Это можно сделать с использованием выделенных сред выполнения программ, среди которых наиболее популярными являются виртуальные машины и контейнеры приложений. stackoverflow Архитектура программного обеспечения подстраивается под эти подходы, отдавая предпочтение все более популярной идеологии микросервисной архитектуры программного обеспечения, соответствующей разделению общего монолитного решения на отдельные независимые компоненты. Подробно это рассматривается в курсе магистратуры УрФУ "Инженерия машинного обучения" (1 семестр) [2]. [2] Из этой статьи вы узнаете: зачем нужны изолированные среды выполнения программ и какие есть подходы для их создания;
что такое виртуальные машины, как их создавать и использовать. зачем нужны изолированные среды выполнения программ и какие есть подходы для их создания; зачем нужны изолированные среды выполнения программ и какие есть подходы для их создания; что такое виртуальные машины, как их создавать и использовать. что такое виртуальные машины, как их создавать и использовать. Термин “виртуализация” стал очень популярным благодаря развивающимся технологиям облачных вычислений. Появились облачные сервисы, предоставляющие услуги доступа к виртуальным аппаратным и программным ресурсам таким образом, что для пользователя это выглядит как работа с локальным компьютером или сервером. Такой подход эффективен тем, что позволяет оптимально использовать имеющиеся аппаратные ресурсы: вычислительные процессоры:
центральный процессор (CPU, Central Processing Unit);
графический процессор (GPU, Graphics Processing Unit);
тензорный процессор (TPU, Tensor Processing Unit);
оперативную память;
средства сетевого обмена информацией;
средства хранения информации, жесткие и оптические диски;
виртуальные программные комплексы, которые можно использовать "из коробки" в облаке. вычислительные процессоры:
центральный процессор (CPU, Central Processing Unit);
графический процессор (GPU, Graphics Processing Unit);
тензорный процессор (TPU, Tensor Processing Unit); вычислительные процессоры: центральный процессор (CPU, Central Processing Unit);
графический процессор (GPU, Graphics Processing Unit);
тензорный процессор (TPU, Tensor Processing Unit); центральный процессор (CPU, Central Processing Unit); центральный процессор (CPU, Central Processing Unit); графический процессор (GPU, Graphics Processing Unit); графический процессор (GPU, Graphics Processing Unit); тензорный процессор (TPU, Tensor Processing Unit); тензорный процессор (TPU, Tensor Processing Unit); оперативную память; оперативную память; средства сетевого обмена информацией; средства сетевого обмена информацией; средства хранения информации, жесткие и оптические диски; средства хранения информации, жесткие и оптические диски; виртуальные программные комплексы, которые можно использовать "из коробки" в облаке. виртуальные программные комплексы, которые можно использовать "из коробки" в облаке. При виртуализации имеющиеся аппаратные ресурсы разделяются на логические виртуальные сущности для того, чтобы создать несколько изолированных друг от друга процессов, пользующихся виртуальными ресурсами независимо друг от друга. Это позволяет оптимально распределить между изолированными процессами нагрузку на имеющиеся “физические” аппаратные мощности, избежать простоя и непроизводительного использования ресурсов, повышает рентабельность вложений в аппаратное обеспечение. Изолированный процесс, пользующийся виртуальными ресурсами, называется виртуальная машина. виртуальная машина  Разделение аппаратных ресурсов между виртуальными машинами. Виртуальная машина имеет свою операционную систему и работает как независимый компьютер. Кроме того, виртуальная машина имеет свои уникальные характеристики мощности процессора и объема памяти, в одних системах нужен большой объем оперативной памяти, а в других предъявляются повышенные требования к скорости вычислений. При планировании ресурсов виртуальных мощностей надо учитывать их суммарный объем “виртуальных мощностей”, сопоставляя с возможностями “физического” аппаратного обеспечения. Понятно, что виртуальные машины, которые не загружены на всю мощность, могут по очереди пользоваться "физическими" ресурсами, при этом их совокупные характеристики в сумме будут больше "физических", в этом и заключается преимущество виртуализации для разделения ограниченного ресурса. Однако если по характеру решаемых задач виртуальные машины часто будут задействовать мощности, близкие к пиковым (например, для вычислений), то необходимо это учесть при планировании. В современных кластерах одновременно может работать много виртуальных машин, поэтому актуален вопрос управления и мониторинга. Система, управляющая виртуальными машинами, называется гипервизор. Оборудование, на котором работает виртуализация, называется хост, его операционная система - хостовой. В противоположность этому, гостевые операционные системы — это операционные системы, работающие в виртуальных машинах, пользующиеся ресурсами хоста. Гостевые операционные системы работают с эмуляцией аппаратных ресурсов. гипервизор хост хостовой гостевые Основная роль гипервизора состоит в координации работы виртуальных машин и физического оборудования хоста при предоставлении виртуальным машинам доступа к физическим ресурсам. Также гипервизор изолирует виртуальные машины друг от друга, чтобы они не конфликтовали за память или вычислительный ресурс.  Роль гипервизора в координации доступа виртуальных машин к ресурсам. По такой схеме работают все системы виртуализации, отличаясь между собой в технических деталях и реализации. Вот, например, схема работы гипервизора Hyper-V, который входит в состав Microsoft Windows.  Архитектура работы гипервизора Hyper-V, схема с официального сайта https://docs.microsoft.com/ru-ru/virtualization/hyper-v-on-windows/about/. Основные преимущества технологии виртуализации: оптимальное использование аппаратных ресурсов:
Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя.
Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели.
дополнительные возможности обеспечения безопасности:
Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему.
Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя.
быстрое развертывание:
Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение.
Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы. оптимальное использование аппаратных ресурсов:
Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя.
Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели. оптимальное использование аппаратных ресурсов: Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя.
Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели. Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя. Один аппаратный ресурс может быть задействован в нескольких виртуальных машинах, которые будут разделять его использование между собой, что снижает время непроизводительного простоя. Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели. Пример для MLOps: вычислительный ресурс GPU в машинном обучении стоит очень дорого, однако применяется главным образом на этапе обучения моделей. В то время как одна модель уже обучена и проходит тестирование, ресурс GPU может быть использован для обучения другой модели. дополнительные возможности обеспечения безопасности:
Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему.
Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя. дополнительные возможности обеспечения безопасности: Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему.
Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя. Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему. Виртуализация позволяет создать копию рабочей системы, чтобы быстро переключиться на вторую систему при выходе из строя первой. Кроме того, виртуальная машина выглядит идентично обыкновенной системе, однако злоумышленник, получивший доступ к виртуальной машине, не сможет вывести из строя основную, хостовую систему. Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя. Пример для MLOps: в случае возникновения неполадок при работе можно переключиться на резервную систему, сократив время простоя. быстрое развертывание:
Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение.
Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы. быстрое развертывание: Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение.
Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы. Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение. Можно создать типовые шаблоны и политики для создания виртуальных машин и их настройки, единообразный подход позволяет упростить и ускорить процедуру развертывания решения. Для унифицированной конфигурации проще проанализировать технические риски и есть возможность создать единые политики безопасности и контролировать их выполнение. Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы. Пример для MLOps: для рабочей конфигурации основных элементов можно создать правила развертывания и настройки, сведя к минимуму время на развертывание системы. Как видите, технологии виртуализации поддерживают тренд в разработке и использовании программного обеспечения, обеспечивая скорость выполнения операций и надежность. Примеры гипервизоров виртуальных машин: VirtualBox компании Oracle, пока еще бесплатный инструмент для виртуализации серверов,
VMware, коммерческий инструмент, обеспечивает виртуализацию серверов, рабочих столов (desktops), хранилищ данных. К сожалению, компания прекратила свою деятельность в России [3],
Hyper-V, входит в состав ОС Microsoft Windows, предоставляет решения по виртуализации серверов и рабочих компьютеров,
zVirt,
Proxmox,
отечественная платформа "Базис", см. например [4]. VirtualBox компании Oracle, пока еще бесплатный инструмент для виртуализации серверов, VirtualBox компании Oracle, пока еще бесплатный инструмент для виртуализации серверов, Oracle VMware, коммерческий инструмент, обеспечивает виртуализацию серверов, рабочих столов (desktops), хранилищ данных. К сожалению, компания прекратила свою деятельность в России [3], VMware, коммерческий инструмент, обеспечивает виртуализацию серверов, рабочих столов (desktops), хранилищ данных. К сожалению, компания прекратила свою деятельность в России [3], VMware [3] Hyper-V, входит в состав ОС Microsoft Windows, предоставляет решения по виртуализации серверов и рабочих компьютеров, Hyper-V, входит в состав ОС Microsoft Windows, предоставляет решения по виртуализации серверов и рабочих компьютеров, Hyper-V zVirt, zVirt, zVirt Proxmox, Proxmox, Proxmox отечественная платформа "Базис", см. например [4]. отечественная платформа "Базис", см. например [4]. [4] Конечно, список инструментов для виртуализации гораздо шире. В конечном счете специалисты DevOps/MLOps выбирают наиболее оптимальные инструменты, руководствуясь необходимыми функциями, производительностью, стоимостью решения. Как и почти любая новая полезная технология, виртуализация порождает и новые проблемы с безопасностью. Например, если злоумышленник взломает гипервизор, то он может получить контроль над всеми виртуальными машинами и их операционными системами. Эту проблему будет сложно диагностировать с помощью традиционных средств защиты, так как гипервизоры "не видны" как со стороны самой виртуальной машины, так и со стороны сети, поскольку взаимодействие виртуальных машин друг с другом организуется без участия физической сети. Поэтому необходимо применять продукты для безопасности виртуализации, способные сканировать и исправлять виртуальные машины, зараженные вредоносным кодом, шифровать все виртуальные диски виртуальных машин и контролировать доступ к ним. Кроме рассмотренной виртуализации серверов, рабочих компьютеров, процессоров и систем хранения данных еще существуют технологии виртуализации сетей, приложений, отдельных компонентов программной системы или даже больших комплексных решений, например ЦОДов. Основные преимущества подхода точно такие же, как мы рассмотрели, быстрая настройка и конфигурирование, простота в эксплуатации, гибкое управление и надежность. А теперь давайте попробуем познакомиться с возможностями виртуализации на конкретном примере. Предупреждение: если вы матерый инженер, который виртуальные машины поднимает на завтрак, настраивает на обед и восстанавливает на ужин, то дальше вы не найдете для себя чего-либо нового. Начиная со следующего абзаца, текст под катом предназначен для тех, кто только начинает свое знакомство со средствами виртуализации. Предупреждение: Создание виртуальной машины в VirtualBox. Создание виртуальной машины в VirtualBox.                                                                                              До новых встреч! Список литературы Список литературы                ]]></text>
</doc>

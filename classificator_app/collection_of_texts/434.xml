<?xml version="1.0" ?>
<doc>
	<label auto="true" type="str" verify="true"><![CDATA[Develop]]></label>
	<author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Slowpoke_QA]]></item>
	</author>
	<date auto="true" type="str" verify="true"><![CDATA[2022-12-05, 11:18]]></date>
	<link auto="true" type="str" verify="true"><![CDATA[https://habr.com/ru/company/cleverpumpkin/blog/703188/]]></link>
	<title auto="true" type="str" verify="true"><![CDATA[Ангелы Charles: Как сниффер поможет разработчикам мобильных приложений]]></title>
	<categories auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Блог компании CleverPumpkin]]></item>
		<item type="str"><![CDATA[Тестирование IT-систем]]></item>
		<item type="str"><![CDATA[Разработка мобильных приложений]]></item>
	</categories>
	<key_words auto="true" type="list" verify="true">
		<item type="str"><![CDATA[charles proxy]]></item>
		<item type="str"><![CDATA[инструкция]]></item>
	</key_words>
	<text auto="true" type="str" verify="true"><![CDATA[Charles называют самым популярным сниффером, инструментом для мониторинга трафика и подмены данных. Он работает как промежуточное звено между вебом или мобильным приложением (в нашем случае) и сервером. Этот инструмент хорошо знают тестировщики, но разработчикам тоже полезно знать и пользоваться его возможностями. В этой статье мы сосредоточимся на основных функциях Charles для мобильных приложений.
Sic! Это продолжение статьи про Charles - начало касается настройки приложения и его интерфейса.
Для начала кратко приведем примеры кейсов разработчиками:
Бэк еще не реализовал фичу, которую уже реализовали мы.
Бэк присылает не те данные.
Добавить или убрать элемент интерфейса, когда через код это делать дольше.
Получить данные, которые не заведены (например, данные о пользователе).
Упрощает поиск причин багов.
Проверка фич после реализации.
И, не откладывая в долгий ящик, перейдем к функциям Charles.
Throttling соединения

Одна из функций Charles - троттлинг соединения, который позволяет симулировать различное поведение Сети.
Инструмент позволит узнать, как приложение будет работать, например, в ситуации нестабильного интернет-соединения или его внезапного отсутствия.
Включить функцию троттлинга можно в меню Proxy, выбрав там пункт «Throttle Settings».

Давайте посмотрим на все настройки функции.
Enable Throttling — это чекбокс включения/отключения троттлинга по приложению. Можно поставить чекбокс на Only for selected hosts — это позволит проводить троттлинг только для заданных url.
Их можно добавить или удалить ниже (Add и Remove).
Далее в меню вы видите набор предустановленных настроек соединений (Throttle preset).
Bandwidth — это скорость соединения.
Utilisation — процент пропускной способности, которую можно предоставить пользователю в любой момент времени.
Round-trip latency — здесь устанавливается задержка между клиентом и сервером.
MTU — максимальный размер пакета.
Reliability, измеряемая в процентах, устанавливает вероятность, что соединение не удастся. Именно эта кнопка нужна для имитации ненадежных сетевых условий.
Кнопка Stability задает вероятность нестабильного соединения и снижения качества. Это полезно для моделирования сетей, в которых периодических падает качество связи - например, мобильных.
Throttling может работать даже при установленном в приложении SSL пиннинге - достаточно настроить его и убрать Enable SSL Proxying с запросов необходимого домена.
Подмена запросов/ответов
Одна из часто используемых функций Charles - подмена запросов/ответов. Часто это самый простой вариант проверки того, как будет отображаться в приложении та или иная фича. «Чарльз» умеет менять ответ от сервера.
Есть четыре основных инструмента для подмены запросов/ответов, которые предлагаются программой:
Breakpoint – позволяет поставить на паузу запрос или ответ и редактировать их в режиме реального времени.
Rewrite – универсальный инструмент подмены, который по заданному правилу ищет совпадения и заменяет на необходимые нам.
Map Local – подменяет целиком ответ на локальный json.
Map Remote – автоматическая переадресация пользователя с одного URL-адреса на другой.
Сравнение преимуществ и недостатков методов, которое заранее может помочь определиться, какой метод выбрать для работы с вашей задачей:
А теперь подробнее о каждом из инструментов.
Breakpoint

Преимущества этого инструмента, который, как мы помним, позволяет поставить на паузу и отредактировать запрос или ответ, в легкости его применения и возможности редактирования как запроса, так и ответа. Этот инструмент идеален для быстрого изменения статуса кода, изменений небольшого числа параметров в запросе/ответе, для единичных случаев подмены.
Однако есть и несколько недостатков: слишком короткое время на редактирование запроса, кроме того, редактировать его приходится каждый раз.
Как пользоваться Breakpoint
1. Правым кликом на запрос добавляем его в список для Breakpoint.

2. Редактировать список добавленного в Breakpoint можно в Proxy → Breakpoint Settings.
3. В момент отправки запроса или получения ответа срабатывает Breakpoint, после чего в окне появляется соответствующая вкладка.
4. Затем переходим в таб Edit Request. Здесь можно изменить Query запроса на Add/Remove.
Функционал кнопок внизу:
Cancel - отменяет изменения, внесенные за время работы breakpoint, и пропускает запрос/ответ дальше в оригинальном виде.
Abort - сбрасывает запрос/ответ и возвращает на клиент ошибку.
Execute - применяет внесенные изменения и пропускает запрос/ответ дальше.
Редактировать данные запроса (как и ответа) удобно в табах Headers или Json Text.
Запрос:
Для продолжения нажимаем на Execute. Теперь запрос прошел и открылось окно ответа. Переходим в таб Edit Response.
Ответ (Headers):
Ответ (Json text):
Для продолжения нажимаем на Execute.
В Breakpoint Settings можно поменять настройки, при которых будет срабатывать брейкпоинт – это актуально, если надо редактировать только ответ и постоянно пропускать запрос.
FAQ
Что делать, если я не вижу запрос/ответ?
Что делать, если я не успеваю редактировать, а новый запрос уже приходит в очередь?
Rewrite
Этот тип подмены по заданному правилу ищет совпадения и заменяет на необходимые нам. В отличие от Breakpoint, здесь как раз довольно сложная настройка, а также есть необходимость настраивать подмену предварительно.
Однако важнее преимущества Rewrite, которые заключаются в его универсальности:
подмена здесь происходит автоматически,
в наличии гибкий инструмент в параметрах подмены,
есть возможность менять и запрос, и ответ.
Этот инструмент идеально подходит для подмены хоста, подмены определенных параметров на конкретные значения, подмен/изменений в query запроса.
Как пользоваться Rewrite
1. Переходим в меню Tools → Rewrite → Rewrite Settings.
2. С помощью кнопки Add добавляем новую вкладку подмен. Затем в Location при необходимости добавляем путь подмены.
Достаточно вставить скопированную заранее ссылку в Host, и она автоматически распарсится.
Можно оставить * в Host для подмены на всех путях. Точно так же можно поступить с полем Location, это будет равносильно * или применению ко всем путям.
3. Затем во втором блоке мы настраиваем подмену Rewrite Rule.
4. Выбираем Type подмены.
5. Выбираем, на что распространяется подмена Request/Response. Request включает или выключает правило подмены на запрос, Response — на ответ.
6. Заполняем поля Match поиска.
Здесь Name — это имя ключа, который ищет правило для подмены, Value — значение, которое ищет правило для подмены, Regex — чекбокс для включения регулярных выражений, если они описаны в полях выше, Match whole value — чекбокс для поиска полного совпадения, Case sensitive — чекбокс для включения/отключения чувствительности к регистру.
7. После заполняем поля Replace замены.
Тоже расшифруем: Name — новое имя для ключа, Value — новое значение, которое применится после замены. Replace first означает, что замена сработает только на первое совпадение, Replace all — замена сработает на все совпадения.
Настройки Rewrite
Важнее всего обратить внимание на Enable Rewrite — это главный чекбокс включения/отключения работы Rewrite подмен в приложении.
Debug in Error Log позволяет отслеживать работу правил подмены в дебаг меню.
Посмотрим также на список подмен.
Чекбокс — включает/отключает конкретный пункт подмены;
Add — добавляет новый пункт в список;
Remove — удаляет пункт из списка;
Import/Export — добавляет/сохраняет настройки из/в файл.
Location:
Чекбокс — включает/отключает конкретный путь подмены;
Add — добавляет новый путь;
Remove — удаляет путь.
Под Location список Rewrite Rule в кратком варианте отображает Type и Action правила подмены.
Чекбокс — включает/отключает конкретное правило подмены;
Add — добавляет новое правило;
Remove — удаляет правило;
Up/Down — позволяет передвигать правила выше/ниже (чем правило выше, тем больше у него приоритет).
Теперь перейдем непосредственно к Rewrite Rule и рассмотрим типы правил подмены.
Примеры правил подмены:
1. Add / Modify / Remove Header — применяет изменения к Headers запроса/ответа. Алгоритм работы с ними во всех случаях начинается с выбора чекбоксом предмета замены (запрос или ответ). Далее, в зависимости от функции:
Add (добавляет хедер):
Достаточно заполнить второй блок Replace — ключ в Name, значение в Value;
Повторяем запрос.
Modify (изменяет существующий хедер):
Заполняем первый блок Match условием для поиска хедера под замену ("ключ":"значение", регулярные выражения);
Заполняем второй блок Replace новым хедером ("ключ":"значение").
Remove (удаляет существующий хедер):
Заполняем первый блок Match условием для поиска хедера для удаления ("ключ":"значение", регулярные выражения)
Пример из практики:

Для определения геопозиции используется запрос, который уже редиректит на нужный ответ в зависимости от страны. Мы подменяем в хедере ответа ссылку на редирект.
Результат:
2. Host / Path / URL — позволяет изменить путь ссылки. Во всех этих функциях важно задизейблить чекбокс выбора запроса/ответа. Далее:
Host (подмена домена):
в первом блоке — Match — заполните единственное доступное поле Value условием для поиска домена под замену,
во втором блоке — Replace — заполняем поле Value новым доменом.
Path (подмена в пути ссылки):
в блоке Match заполняем поле Value условием для поиска части пути под замену,
в блоке Replace заполняем поле Value новым путем.
URL (подмена ссылки целиком):
Здесь заполняем Value в блоке Match условием для поиска части ссылки под замену,
в блоке Replace заполняем поле Value новой частью ссылки.
Пример из практики:

Подмена тестового сервера с приходящего https://spb.test.dev.ru на необходимый в данный момент https://spb.web.test.ru
3. Add / Modify / Remove Query Param — применяет изменения к Query запроса/ответа. Во всех трех вариантах чекбокс выбора запроса/ответа задизейблен. В остальном есть небольшие различия:
Add — добавление квери. Здесь достаточно заполнить второй блок Replace — ключ в Name, значение в Value — и повторить запрос.
Modify — изменение существующего квери. Здесь первый блок Match заполняем условием для поиска квери под замену ("ключ":"значение", регулярные выражения), а второй блок Replace - новым квери ("ключ":"значение").
Remove — удаление существующего квери. Здесь просто заполняем первый блок Match условием для поиска квери для удаления ("ключ":"значение", регулярные выражения).
Пример из практики:

Подмена тега в приложении Sports.ru, когда легким движением руки мы получаем на экране информации игрока не Роналду, а Месси.
Результат:
4. Response Status — позволяет изменить статус-код ответа.
В этой ситуации чекбокс выбора запроса/ответа задизейблен, подмена только на ответ. Заполняем первый блок Match в единственном доступном поле Value условием для поиска статус-кода под замену, в блоке Replace заполняем поле Value новым статус-кодом.
Пример из практики:

Кейс, касающийся подмены статуса 200 на 500 для отображения ошибки сервера.
Результат:
5. Body — изменение тела запроса/ответа.
Здесь выбираем чекбоксом предмет замены (запрос/ответ), заполняем первый блок Match условием для поиска параметра под замену ("ключ":"значение", регулярные выражения), заполняем второй блок Replace новым параметром ("ключ":"значение").
Пример из практики:

Меняем на приложении «Кассир.ру» минимальную цену события с 2500 на 0.
Для правил подмены лучше брать структуру, которая находится во вкладке ответа Text. Это поможет не запутаться — нужны лишние пробелы в подмене или нет.
Пробелы чаще не нужны, их стоит убрать между парами "ключ":"значение". Но бывают и исключения. Копирование из Text поможет избежать подобных проблем.
FAQ
Что делать, если подмена не срабатывает?
Что делать, если срабатывает не та подмена?
Что делать, сели я подменяю конкретное значение, а Charles подменяет все совпадения даже внутри других значений?
Map Local
Этот метод подменяет целиком ответ на локальный json. Он работает только с ответом, не касаясь запроса. Кроме того, здесь необходима предварительная настройка — получение рабочего json.
Однако есть важные преимущества:
возможность одновременной работы с большим количеством изменений,
возможность «нарисовать» выдачу, которой нет на сервере,
изменения подтягиваются при новом запросе сразу после сохранения в json.
Этот метод идеально подойдет для работы с большим количеством изменений в структуре ответа и для моментов, когда сервер не отдает нужный ответ — бэкенд еще не готов.

Как пользоваться Map Local

1. Заранее подготовьте json с полным ответом от сервера. Проще всего его взять из готового ответа и изменить под свои требования, либо воспользоваться сваггером/документацией для того, чтобы написать ответ самостоятельно.

2. Отредактируйте данные json файла в текстовом редакторе и сохраните файл.
Рекомендуем использовать для редактирования текстовый редактор с возможностью удобной работы с JSON - например, Sublime Text.

3. Правым кликом по нужному запросу выбираем Map Local и попадаем в меню добавления/редактирования Edit Mapping.
4. В блоке Map From уже будет заполнен запрос — и тут же его можно отредактировать.
5. В блоке Map To кнопкой Choose выбираем путь до файла json, который подготовили ранее. Затем повторяем запрос с экрана или вручную. В запросе будет приходить новый сохраненный ответ из файла.
Если есть необходимость, редактируйте json — при этом повторно путь к файлу задавать не надо, он уже добавлен.
Настройки Map Local
Переходим в меню Tools → Map Local. Map Local Settings выглядит так:
Enable Map Local — чекбокс, который включает/отключает работу Map Local в приложении.
Список запросов с подменой содержит путь запроса и путь до файла json.
Чекбокс у подмены включает/отключает конкретно эту подмену в приложении.
Кнопки: Add — добавляет новый запрос для подмены, Remove - удаляет, а Up/Down — позволяет передвигать подмены выше/ниже, повышая или понижая их приоритет. Import/Export позволяют добавлять/сохранять настройки из файла или в файл.
Двойной клик по подмене из списка откроет меню добавления/редактирования Edit Mapping. Можно отредактировать Host или перевыбрать файл json для подмены.
FAQ
Что делать, если на экране приложения отображается ошибка/креш?
Что делать, если я вижу не ту подмену?
Map Remote

Мы подобрались к последнему методу подмены, который используется в Charles. Он нужен для автоматической переадресации пользователя с одного URL-адреса на другой. Это его главный недостаток и одновременно преимущество: Map Remote умеет только редиректить на новую ссылку, но это самый простой способ подменить путь ссылки, когда уже готов нужный ответ.

Как использовать метод

1. Правым кликом по нужному запросу выбираем Map Remote и попадаем в меню добавления/редактирования Edit Mapping.

2. Здесь в блоке Map From уже будет заполнен запрос, но его можно тут же отредактировать.

3. В Map To добавляем путь, на который будет настроен дальнейший редирект. После чего повторяем запрос.
Настройки Map Remote
Переходим в меню Tools → Map Remote.
Здесь все так же, как в настройках предыдущего метода.
Enable Map Remote — это чекбокс, который включает/отключает работу Map Remote в приложении.
Список запросов с редиректом содержит путь запроса и новый путь, на который мы ссылаемся.
Чекбокс у редиректа включит/отключит конкретно этот редирект в приложении.
Кнопки: Add добавит новый запрос для редиректа, Remove удалит его из списка, Up/Down передвинет редиректы выше/ниже, меняя их приоритет. Import/Export — добавит/сохранит настройки из или в файл.
Двойной клик по редиректу из списка откроет меню добавления/редактирования Edit Mapping. Здесь можно заменить Map From и Map To.
FAQ
Что делать, если Map Remote настроен, редирект есть, но в приложении ошибка?
Итог
Мы рассмотрели функциональность Charles Proxy с упором на правила подмены, которые могут понадобиться при работе с мобильными приложениями. Скорее всего, вы столкнетесь с такими задачами.
Не стоит останавливаться на одном методе, если вы его попробовали и начали для всего использовать. Каждый метод хорош по-своему и оптимально подходит под конкретные задачи. Знакомство с каждым из них позволит оптимизировать ваш рабочий процесс и сделать его более интересным и комфортным. Например, Breakpoint лучше справляется со статус-кодами, а Map Local — с большими json-структурами. Так что не поленитесь узнать все методы — это позволит ускорить лично вашу работу и оптимизировать время. Charles называют самым популярным сниффером, инструментом для мониторинга трафика и подмены данных. Он работает как промежуточное звено между вебом или мобильным приложением (в нашем случае) и сервером. Этот инструмент хорошо знают тестировщики, но разработчикам тоже полезно знать и пользоваться его возможностями. В этой статье мы сосредоточимся на основных функциях Charles для мобильных приложений.   Sic! Это продолжение статьи про Charles - начало касается настройки приложения и его интерфейса. начало касается настройки приложения и его интерфейса Для начала кратко приведем примеры кейсов разработчиками: Бэк еще не реализовал фичу, которую уже реализовали мы.
Бэк присылает не те данные.
Добавить или убрать элемент интерфейса, когда через код это делать дольше.
Получить данные, которые не заведены (например, данные о пользователе).
Упрощает поиск причин багов.
Проверка фич после реализации. Бэк еще не реализовал фичу, которую уже реализовали мы. Бэк еще не реализовал фичу, которую уже реализовали мы. Бэк присылает не те данные. Бэк присылает не те данные. Добавить или убрать элемент интерфейса, когда через код это делать дольше. Добавить или убрать элемент интерфейса, когда через код это делать дольше. Получить данные, которые не заведены (например, данные о пользователе). Получить данные, которые не заведены (например, данные о пользователе). Упрощает поиск причин багов. Упрощает поиск причин багов. Проверка фич после реализации. Проверка фич после реализации. И, не откладывая в долгий ящик, перейдем к функциям Charles. Throttling соединения   Одна из функций Charles - троттлинг соединения, который позволяет симулировать различное поведение Сети.
Инструмент позволит узнать, как приложение будет работать, например, в ситуации нестабильного интернет-соединения или его внезапного отсутствия.
Включить функцию троттлинга можно в меню Proxy, выбрав там пункт «Throttle Settings».      Давайте посмотрим на все настройки функции.
Enable Throttling — это чекбокс включения/отключения троттлинга по приложению. Можно поставить чекбокс на Only for selected hosts — это позволит проводить троттлинг только для заданных url.
Их можно добавить или удалить ниже (Add и Remove).   Enable Throttling Only for selected hosts url  Add Remove Далее в меню вы видите набор предустановленных настроек соединений (Throttle preset). Throttle preset Bandwidth — это скорость соединения.
Utilisation — процент пропускной способности, которую можно предоставить пользователю в любой момент времени.
Round-trip latency — здесь устанавливается задержка между клиентом и сервером.
MTU — максимальный размер пакета.
Reliability, измеряемая в процентах, устанавливает вероятность, что соединение не удастся. Именно эта кнопка нужна для имитации ненадежных сетевых условий.
Кнопка Stability задает вероятность нестабильного соединения и снижения качества. Это полезно для моделирования сетей, в которых периодических падает качество связи - например, мобильных. Bandwidth  Utilisation  Round-trip latency  MTU  Reliability  Stability Throttling может работать даже при установленном в приложении SSL пиннинге - достаточно настроить его и убрать Enable SSL Proxying с запросов необходимого домена. SSL пиннинге Enable SSL Proxying Подмена запросов/ответов Одна из часто используемых функций Charles - подмена запросов/ответов. Часто это самый простой вариант проверки того, как будет отображаться в приложении та или иная фича. «Чарльз» умеет менять ответ от сервера.
Есть четыре основных инструмента для подмены запросов/ответов, которые предлагаются программой:  Breakpoint – позволяет поставить на паузу запрос или ответ и редактировать их в режиме реального времени.
Rewrite – универсальный инструмент подмены, который по заданному правилу ищет совпадения и заменяет на необходимые нам.
Map Local – подменяет целиком ответ на локальный json.
Map Remote – автоматическая переадресация пользователя с одного URL-адреса на другой. Breakpoint – позволяет поставить на паузу запрос или ответ и редактировать их в режиме реального времени. Breakpoint – позволяет поставить на паузу запрос или ответ и редактировать их в режиме реального времени. Breakpoint Rewrite – универсальный инструмент подмены, который по заданному правилу ищет совпадения и заменяет на необходимые нам. Rewrite – универсальный инструмент подмены, который по заданному правилу ищет совпадения и заменяет на необходимые нам. Rewrite Map Local – подменяет целиком ответ на локальный json. Map Local – подменяет целиком ответ на локальный json. Map Local Map Remote – автоматическая переадресация пользователя с одного URL-адреса на другой. Map Remote – автоматическая переадресация пользователя с одного URL-адреса на другой. Map Remote Сравнение преимуществ и недостатков методов, которое заранее может помочь определиться, какой метод выбрать для работы с вашей задачей:   А теперь подробнее о каждом из инструментов. Breakpoint    Преимущества этого инструмента, который, как мы помним, позволяет поставить на паузу и отредактировать запрос или ответ, в легкости его применения и возможности редактирования как запроса, так и ответа. Этот инструмент идеален для быстрого изменения статуса кода, изменений небольшого числа параметров в запросе/ответе, для единичных случаев подмены.
Однако есть и несколько недостатков: слишком короткое время на редактирование запроса, кроме того, редактировать его приходится каждый раз.   Как пользоваться Breakpoint Как пользоваться Breakpoint 1. Правым кликом на запрос добавляем его в список для Breakpoint.

2. Редактировать список добавленного в Breakpoint можно в Proxy → Breakpoint Settings.    Proxy → Breakpoint Settings.   3. В момент отправки запроса или получения ответа срабатывает Breakpoint, после чего в окне появляется соответствующая вкладка. 4. Затем переходим в таб Edit Request. Здесь можно изменить Query запроса на Add/Remove. Edit Request Add/Remove   Функционал кнопок внизу: Cancel - отменяет изменения, внесенные за время работы breakpoint, и пропускает запрос/ответ дальше в оригинальном виде.
Abort - сбрасывает запрос/ответ и возвращает на клиент ошибку.
Execute - применяет внесенные изменения и пропускает запрос/ответ дальше. Cancel - отменяет изменения, внесенные за время работы breakpoint, и пропускает запрос/ответ дальше в оригинальном виде. Cancel - отменяет изменения, внесенные за время работы breakpoint, и пропускает запрос/ответ дальше в оригинальном виде. Cancel Abort - сбрасывает запрос/ответ и возвращает на клиент ошибку. Abort - сбрасывает запрос/ответ и возвращает на клиент ошибку. Abort Execute - применяет внесенные изменения и пропускает запрос/ответ дальше. Execute - применяет внесенные изменения и пропускает запрос/ответ дальше. Execute Редактировать данные запроса (как и ответа) удобно в табах Headers или Json Text. Запрос:   Для продолжения нажимаем на Execute. Теперь запрос прошел и открылось окно ответа. Переходим в таб Edit Response. Execute Edit Response Ответ (Headers):   Ответ (Json text):   Для продолжения нажимаем на Execute.
В Breakpoint Settings можно поменять настройки, при которых будет срабатывать брейкпоинт – это актуально, если надо редактировать только ответ и постоянно пропускать запрос. Execute  Breakpoint Settings FAQ Что делать, если я не вижу запрос/ответ? Что делать, если я не вижу запрос/ответ?    Что делать, если я не успеваю редактировать, а новый запрос уже приходит в очередь? Что делать, если я не успеваю редактировать, а новый запрос уже приходит в очередь?   Rewrite Этот тип подмены по заданному правилу ищет совпадения и заменяет на необходимые нам. В отличие от Breakpoint, здесь как раз довольно сложная настройка, а также есть необходимость настраивать подмену предварительно. Однако важнее преимущества Rewrite, которые заключаются в его универсальности: подмена здесь происходит автоматически,
в наличии гибкий инструмент в параметрах подмены,
есть возможность менять и запрос, и ответ. подмена здесь происходит автоматически, подмена здесь происходит автоматически, в наличии гибкий инструмент в параметрах подмены, в наличии гибкий инструмент в параметрах подмены, есть возможность менять и запрос, и ответ. есть возможность менять и запрос, и ответ. Этот инструмент идеально подходит для подмены хоста, подмены определенных параметров на конкретные значения, подмен/изменений в query запроса. Как пользоваться Rewrite 1. Переходим в меню Tools → Rewrite → Rewrite Settings. Tools Rewrite Rewrite Settings.   2. С помощью кнопки Add добавляем новую вкладку подмен. Затем в Location при необходимости добавляем путь подмены. Add Location   Достаточно вставить скопированную заранее ссылку в Host, и она автоматически распарсится. Host Можно оставить * в Host для подмены на всех путях. Точно так же можно поступить с полем Location, это будет равносильно * или применению ко всем путям. Host Location 3. Затем во втором блоке мы настраиваем подмену Rewrite Rule.  Rewrite Rule.   4. Выбираем Type подмены. Type   5. Выбираем, на что распространяется подмена Request/Response. Request включает или выключает правило подмены на запрос, Response — на ответ. Request/Response Request Response   6. Заполняем поля Match поиска. Match   Здесь Name — это имя ключа, который ищет правило для подмены, Value — значение, которое ищет правило для подмены, Regex — чекбокс для включения регулярных выражений, если они описаны в полях выше, Match whole value — чекбокс для поиска полного совпадения, Case sensitive — чекбокс для включения/отключения чувствительности к регистру. Name Value Regex Match whole value Case sensitive 7. После заполняем поля Replace замены. Replace   Тоже расшифруем: Name — новое имя для ключа, Value — новое значение, которое применится после замены. Replace first означает, что замена сработает только на первое совпадение, Replace all — замена сработает на все совпадения. Name Value Replace first Replace all Настройки Rewrite   Важнее всего обратить внимание на Enable Rewrite — это главный чекбокс включения/отключения работы Rewrite подмен в приложении. Enable Rewrite Rewrite Debug in Error Log позволяет отслеживать работу правил подмены в дебаг меню. Debug in Error Log Посмотрим также на список подмен. Чекбокс — включает/отключает конкретный пункт подмены;
Add — добавляет новый пункт в список;
Remove — удаляет пункт из списка;
Import/Export — добавляет/сохраняет настройки из/в файл. Чекбокс — включает/отключает конкретный пункт подмены; Чекбокс — включает/отключает конкретный пункт подмены; Add — добавляет новый пункт в список; Add — добавляет новый пункт в список; Remove — удаляет пункт из списка; Remove — удаляет пункт из списка; Import/Export — добавляет/сохраняет настройки из/в файл. Import/Export — добавляет/сохраняет настройки из/в файл. Location: Чекбокс — включает/отключает конкретный путь подмены;
Add — добавляет новый путь;
Remove — удаляет путь. Чекбокс — включает/отключает конкретный путь подмены; Чекбокс — включает/отключает конкретный путь подмены; Add — добавляет новый путь; Add — добавляет новый путь; Remove — удаляет путь. Remove — удаляет путь. Под Location список Rewrite Rule в кратком варианте отображает Type и Action правила подмены. Чекбокс — включает/отключает конкретное правило подмены;
Add — добавляет новое правило;
Remove — удаляет правило;
Up/Down — позволяет передвигать правила выше/ниже (чем правило выше, тем больше у него приоритет). Чекбокс — включает/отключает конкретное правило подмены; Чекбокс — включает/отключает конкретное правило подмены; Add — добавляет новое правило; Add — добавляет новое правило; Remove — удаляет правило; Remove — удаляет правило; Up/Down — позволяет передвигать правила выше/ниже (чем правило выше, тем больше у него приоритет). Up/Down — позволяет передвигать правила выше/ниже (чем правило выше, тем больше у него приоритет). Теперь перейдем непосредственно к Rewrite Rule и рассмотрим типы правил подмены. Rewrite Rule Примеры правил подмены: 1. Add / Modify / Remove Header — применяет изменения к Headers запроса/ответа. Алгоритм работы с ними во всех случаях начинается с выбора чекбоксом предмета замены (запрос или ответ). Далее, в зависимости от функции: Add / Modify / Remove Header Add (добавляет хедер): Add Достаточно заполнить второй блок Replace — ключ в Name, значение в Value;
Повторяем запрос. Достаточно заполнить второй блок Replace — ключ в Name, значение в Value; Достаточно заполнить второй блок Replace — ключ в Name, значение в Value; Повторяем запрос. Повторяем запрос. Modify (изменяет существующий хедер): Modify Заполняем первый блок Match условием для поиска хедера под замену ("ключ":"значение", регулярные выражения);
Заполняем второй блок Replace новым хедером ("ключ":"значение"). Заполняем первый блок Match условием для поиска хедера под замену ("ключ":"значение", регулярные выражения); Заполняем первый блок Match условием для поиска хедера под замену ("ключ":"значение", регулярные выражения); Заполняем второй блок Replace новым хедером ("ключ":"значение"). Заполняем второй блок Replace новым хедером ("ключ":"значение"). Remove (удаляет существующий хедер):
Заполняем первый блок Match условием для поиска хедера для удаления ("ключ":"значение", регулярные выражения) Remove    Пример из практики:

Для определения геопозиции используется запрос, который уже редиректит на нужный ответ в зависимости от страны. Мы подменяем в хедере ответа ссылку на редирект. Пример из практики:   подменяем в хедере ответа ссылку   Результат:   2. Host / Path / URL — позволяет изменить путь ссылки. Во всех этих функциях важно задизейблить чекбокс выбора запроса/ответа. Далее: Host / Path / URL важно задизейблить чекбокс выбора запроса/ответа Host (подмена домена): Host в первом блоке — Match — заполните единственное доступное поле Value условием для поиска домена под замену,
во втором блоке — Replace — заполняем поле Value новым доменом. в первом блоке — Match — заполните единственное доступное поле Value условием для поиска домена под замену, в первом блоке — Match — заполните единственное доступное поле Value условием для поиска домена под замену, во втором блоке — Replace — заполняем поле Value новым доменом. во втором блоке — Replace — заполняем поле Value новым доменом. Path (подмена в пути ссылки): Path в блоке Match заполняем поле Value условием для поиска части пути под замену,
в блоке Replace заполняем поле Value новым путем. в блоке Match заполняем поле Value условием для поиска части пути под замену, в блоке Match заполняем поле Value условием для поиска части пути под замену, в блоке Replace заполняем поле Value новым путем. в блоке Replace заполняем поле Value новым путем. URL (подмена ссылки целиком): URL Здесь заполняем Value в блоке Match условием для поиска части ссылки под замену,
в блоке Replace заполняем поле Value новой частью ссылки. Здесь заполняем Value в блоке Match условием для поиска части ссылки под замену, Здесь заполняем Value в блоке Match условием для поиска части ссылки под замену, в блоке Replace заполняем поле Value новой частью ссылки. в блоке Replace заполняем поле Value новой частью ссылки.   Пример из практики:

Подмена тестового сервера с приходящего https://spb.test.dev.ru на необходимый в данный момент https://spb.web.test.ru Пример из практики:   https://spb.test.dev.ru https://spb.web.test.ru   3. Add / Modify / Remove Query Param — применяет изменения к Query запроса/ответа. Во всех трех вариантах чекбокс выбора запроса/ответа задизейблен. В остальном есть небольшие различия: Add / Modify / Remove Query Param чекбокс выбора запроса/ответа задизейблен Add — добавление квери. Здесь достаточно заполнить второй блок Replace — ключ в Name, значение в Value — и повторить запрос.
Modify — изменение существующего квери. Здесь первый блок Match заполняем условием для поиска квери под замену ("ключ":"значение", регулярные выражения), а второй блок Replace - новым квери ("ключ":"значение").
Remove — удаление существующего квери. Здесь просто заполняем первый блок Match условием для поиска квери для удаления ("ключ":"значение", регулярные выражения). Add — добавление квери. Здесь достаточно заполнить второй блок Replace — ключ в Name, значение в Value — и повторить запрос. Add — добавление квери. Здесь достаточно заполнить второй блок Replace — ключ в Name, значение в Value — и повторить запрос. Add Modify — изменение существующего квери. Здесь первый блок Match заполняем условием для поиска квери под замену ("ключ":"значение", регулярные выражения), а второй блок Replace - новым квери ("ключ":"значение"). Modify — изменение существующего квери. Здесь первый блок Match заполняем условием для поиска квери под замену ("ключ":"значение", регулярные выражения), а второй блок Replace - новым квери ("ключ":"значение"). Modify Remove — удаление существующего квери. Здесь просто заполняем первый блок Match условием для поиска квери для удаления ("ключ":"значение", регулярные выражения). Remove — удаление существующего квери. Здесь просто заполняем первый блок Match условием для поиска квери для удаления ("ключ":"значение", регулярные выражения). Remove   Пример из практики:

Подмена тега в приложении Sports.ru, когда легким движением руки мы получаем на экране информации игрока не Роналду, а Месси. Пример из практики:   Sports.ru   Результат:   4. Response Status — позволяет изменить статус-код ответа.  Response Status В этой ситуации чекбокс выбора запроса/ответа задизейблен, подмена только на ответ. Заполняем первый блок Match в единственном доступном поле Value условием для поиска статус-кода под замену, в блоке Replace заполняем поле Value новым статус-кодом. чекбокс выбора запроса/ответа задизейблен   Пример из практики:

Кейс, касающийся подмены статуса 200 на 500 для отображения ошибки сервера.
Результат: Пример из практики:      5. Body — изменение тела запроса/ответа. Body Здесь выбираем чекбоксом предмет замены (запрос/ответ), заполняем первый блок Match условием для поиска параметра под замену ("ключ":"значение", регулярные выражения), заполняем второй блок Replace новым параметром ("ключ":"значение"). выбираем чекбоксом предмет замены   Пример из практики:

Меняем на приложении «Кассир.ру» минимальную цену события с 2500 на 0. Пример из практики:     Для правил подмены лучше брать структуру, которая находится во вкладке ответа Text. Это поможет не запутаться — нужны лишние пробелы в подмене или нет. Пробелы чаще не нужны, их стоит убрать между парами "ключ":"значение". Но бывают и исключения. Копирование из Text поможет избежать подобных проблем. FAQ Что делать, если подмена не срабатывает? Что делать, если подмена не срабатывает?            Что делать, если срабатывает не та подмена? Что делать, если срабатывает не та подмена?        Что делать, сели я подменяю конкретное значение, а Charles подменяет все совпадения даже внутри других значений? Что делать, сели я подменяю конкретное значение, а Charles подменяет все совпадения даже внутри других значений?          Map Local Этот метод подменяет целиком ответ на локальный json. Он работает только с ответом, не касаясь запроса. Кроме того, здесь необходима предварительная настройка — получение рабочего json. Однако есть важные преимущества: возможность одновременной работы с большим количеством изменений,
возможность «нарисовать» выдачу, которой нет на сервере,
изменения подтягиваются при новом запросе сразу после сохранения в json. возможность одновременной работы с большим количеством изменений, возможность одновременной работы с большим количеством изменений, дновременной работы возможность «нарисовать» выдачу, которой нет на сервере, возможность «нарисовать» выдачу, которой нет на сервере, возможность «нарисовать» выдачу, которой нет на сервере изменения подтягиваются при новом запросе сразу после сохранения в json. изменения подтягиваются при новом запросе сразу после сохранения в json. Этот метод идеально подойдет для работы с большим количеством изменений в структуре ответа и для моментов, когда сервер не отдает нужный ответ — бэкенд еще не готов.    Как пользоваться Map Local

1. Заранее подготовьте json с полным ответом от сервера. Проще всего его взять из готового ответа и изменить под свои требования, либо воспользоваться сваггером/документацией для того, чтобы написать ответ самостоятельно.

2. Отредактируйте данные json файла в текстовом редакторе и сохраните файл.
Рекомендуем использовать для редактирования текстовый редактор с возможностью удобной работы с JSON - например, Sublime Text.

3. Правым кликом по нужному запросу выбираем Map Local и попадаем в меню добавления/редактирования Edit Mapping.  Как пользоваться Map Local      Sublime Text     4. В блоке Map From уже будет заполнен запрос — и тут же его можно отредактировать. 5. В блоке Map To кнопкой Choose выбираем путь до файла json, который подготовили ранее. Затем повторяем запрос с экрана или вручную. В запросе будет приходить новый сохраненный ответ из файла. Если есть необходимость, редактируйте json — при этом повторно путь к файлу задавать не надо, он уже добавлен. Настройки Map Local Переходим в меню Tools → Map Local. Map Local Settings выглядит так:   Enable Map Local — чекбокс, который включает/отключает работу Map Local в приложении.
Список запросов с подменой содержит путь запроса и путь до файла json.
Чекбокс у подмены включает/отключает конкретно эту подмену в приложении. Enable Map Local Map Local   Кнопки: Add — добавляет новый запрос для подмены, Remove - удаляет, а Up/Down — позволяет передвигать подмены выше/ниже, повышая или понижая их приоритет. Import/Export позволяют добавлять/сохранять настройки из файла или в файл. Add Remove Up/Down Import/Export  Двойной клик по подмене из списка откроет меню добавления/редактирования Edit Mapping. Можно отредактировать Host или перевыбрать файл json для подмены. Edit Mapping   FAQ Что делать, если на экране приложения отображается ошибка/креш? Что делать, если на экране приложения отображается ошибка/креш?   Что делать, если я вижу не ту подмену? Что делать, если я вижу не ту подмену?   Map Remote    Мы подобрались к последнему методу подмены, который используется в Charles. Он нужен для автоматической переадресации пользователя с одного URL-адреса на другой. Это его главный недостаток и одновременно преимущество: Map Remote умеет только редиректить на новую ссылку, но это самый простой способ подменить путь ссылки, когда уже готов нужный ответ.

Как использовать метод

1. Правым кликом по нужному запросу выбираем Map Remote и попадаем в меню добавления/редактирования Edit Mapping.  нужен для автоматической переадресации пользователя с одного URL-адреса на другой   Как использовать метод   Map Remote Edit Mapping.   2. Здесь в блоке Map From уже будет заполнен запрос, но его можно тут же отредактировать.

3. В Map To добавляем путь, на который будет настроен дальнейший редирект. После чего повторяем запрос.  Map From   Map To Настройки Map Remote Переходим в меню Tools → Map Remote. Tools Map Remote   Здесь все так же, как в настройках предыдущего метода. Enable Map Remote — это чекбокс, который включает/отключает работу Map Remote в приложении.
Список запросов с редиректом содержит путь запроса и новый путь, на который мы ссылаемся.
Чекбокс у редиректа включит/отключит конкретно этот редирект в приложении. Enable Map Remote   Кнопки: Add добавит новый запрос для редиректа, Remove удалит его из списка, Up/Down передвинет редиректы выше/ниже, меняя их приоритет. Import/Export — добавит/сохранит настройки из или в файл. Add Remove Up/Down  Import/Export  Двойной клик по редиректу из списка откроет меню добавления/редактирования Edit Mapping. Здесь можно заменить Map From и Map To. Edit Mapping Map From Map To.   FAQ Что делать, если Map Remote настроен, редирект есть, но в приложении ошибка? Что делать, если Map Remote настроен, редирект есть, но в приложении ошибка?   Итог Мы рассмотрели функциональность Charles Proxy с упором на правила подмены, которые могут понадобиться при работе с мобильными приложениями. Скорее всего, вы столкнетесь с такими задачами. Не стоит останавливаться на одном методе, если вы его попробовали и начали для всего использовать. Каждый метод хорош по-своему и оптимально подходит под конкретные задачи. Знакомство с каждым из них позволит оптимизировать ваш рабочий процесс и сделать его более интересным и комфортным. Например, Breakpoint лучше справляется со статус-кодами, а Map Local — с большими json-структурами. Так что не поленитесь узнать все методы — это позволит ускорить лично вашу работу и оптимизировать время. ]]></text>
</doc>

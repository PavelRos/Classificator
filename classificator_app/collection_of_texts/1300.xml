<?xml version="1.0" ?>
<doc>
	<label auto="true" type="str" verify="true"><![CDATA[Other]]></label>
	<author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Unigine]]></item>
	</author>
	<date auto="true" type="str" verify="true"><![CDATA[2022-05-24, 15:13]]></date>
	<link auto="true" type="str" verify="true"><![CDATA[https://habr.com/ru/company/unigine/blog/667292/]]></link>
	<title auto="true" type="str" verify="true"><![CDATA[Быстрый переход на UNIGINE с Unreal Engine 4: первые шаги]]></title>
	<categories auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Блог компании UNIGINE]]></item>
		<item type="str"><![CDATA[Программирование]]></item>
		<item type="str"><![CDATA[C++]]></item>
		<item type="str"><![CDATA[Работа с 3D-графикой]]></item>
	</categories>
	<key_words auto="true" type="list" verify="true">
		<item type="str"><![CDATA[3d-engine]]></item>
		<item type="str"><![CDATA[unreal engine]]></item>
		<item type="str"><![CDATA[unigine]]></item>
		<item type="str"><![CDATA[с++]]></item>
		<item type="str"><![CDATA[realtime rendering]]></item>
		<item type="str"><![CDATA[3d движок]]></item>
	</key_words>
	<text auto="true" type="str" verify="true"><![CDATA[Основные термины, управление проектами, интерфейс редактора, работа со сценой, настройки проекта и другое.
Если вы планируете переходить с иностранного софта на отечественный и ищете полноценный аналог Unreal Engine 4, то одним из вариантов может стать продукция нашей компании, полностью готовая к импортозамещению. UNIGINE использует общепринятые интерфейсы и рабочие процессы, которые могут быть вам знакомы по работе с другими 3D-инструментами. По опыту наших клиентов, для перехода на UNIGINE с других платформ уходит не более 1–2 недель.
Далее в статье рассмотрим базовую информацию по переходу на UNIGINE с Unreal Engine 4.
Основные термины
Сначала разберемся с названиями различных сущностей и другими терминами. В таблице ниже приведены термины Unreal Engine 4 и их точные или приблизительные эквиваленты в UNIGINE.
Категория
UE4
UNIGINE
Управление проектами и SDK
Epic Games Launcher
SDK Browser
Интерфейс редактора
World Outliner
Окно World Nodes
Details Panel
Окно Parameters
Content Browser
Окно Asset Browser
Viewport
Editor Viewport
Сцена
Level
World
Компоненты геймплея
Actor, Pawn
Node
Blueprint Class
NodeReference + Component System
Меши
Static Mesh
Static Mesh, Dynamic Mesh
Skeletal Mesh
Skinned Mesh
Эффекты
Effect, Particle, Cascade
Particle System
Post Process Materials
Скриптовые материалы
Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects
Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling)
Color Grading, Tone Mapping
Цветокоррекция
Экстерьеры
Terrain
Landscape Terrain / Global Terrain
Foliage
Mesh Clutter
Grass
Volumetric Clouds
Volumetric Clouds
Water Meshing System
Система симуляции воды
Освещение
Lights
Источники света
Lightmass
Lightmaps
Light Propagation Volumes
GI на основе вокселей
Sphere Reflection Capture
Environment Probe
Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination
Графический интерфейс
UMG (Unreal Motion Graphics)
GUI
Материалы
Material Editor
Редактор материалов
Material
Базовый материал
Material Instance
Пользовательский материал
Программирование
C++
C++ / C#
Blueprint
UnigineScript
Физика
Line Trace
getIntersection
Primitive Component
Rigid Body
Collision
Shape
Physics Constraint
Joint
Анимация
Sequencer
Tracker
Управление проектами
Пользователи Unreal Engine 4 используют Epic Games Launcher — приложение, которое упрощает поиск, загрузку и управление вашими проектами и установками. Кроме того, можно управлять своими проектами напрямую через Unreal Editor: создавать новый проект и переключаться между существующими.
В UNIGINE для этих целей служит UNIGINE SDK Browser. Помимо управления проектами и установленными SDK, браузер SDK предоставляет доступ к примерам (Samples), базе знаний (Knowledge) и дополнениям (Add-Ons). В последнюю категорию входят различные 3D-модели и материалы, в том числе растительность, спецэффекты, погодные эффекты и другое.
Также заметным отличием UNIGINE является возможность создания нового (или редактирование старого) проекта с поддержкой одного из нескольких языков программирования: C++, C# и UnigineScript. Для пользователей Unreal Engine 4 рекомендуется использовать C++. Также возможно использование нескольких языков программирования в одном проекте.
Как создать новый проект на C++ в SDK Browser
Нажмите Create New в разделе My Projects.
Выберите тип проекта C++ (Visual Studio 2015+) в поле API + IDE.
Если требуется поддержка VR-гарнитур, выберите шаблон проекта VR (поле Template). Это активирует необходимые плагины и добавит нужный контент (больше о поддержке VR-устройств здесь).
Нажмите Create New Project.
После завершения загрузки нажмите Open Editor, чтобы запустить UNIGINE Editor; нажмите Open Code IDE, чтобы открыть исходный код проекта через IDE по умолчанию.
Интерфейс редактора
Элементы интерфейсов Unreal Editor и UNIGINE Editor близки по функционалу: на схеме ниже они окрашены в похожие цвета. Расположение элементов UNIGINE Editor можно настраивать, перетаскивая и изменяя их размер. В UNIGINE по умолчанию используется темная тема.
Toolbar. Панель инструментов, которая обеспечивает доступ к инструментам позиционирования, а также элементам управления логикой приложения, воспроизведением звука, симуляцией физики, компиляцией шейдеров и запеканием света.
World Hierarchy Window. Инструмент для работы с иерархией нод. Позволяет организовывать ноды в иерархию, а также добавлять, удалять, клонировать и переименовывать их.
Editor Viewport. Просмотр трехмерной сцены. Позволяет визуально перемещаться и редактировать виртуальный мир.
Parameters Window. Окно параметров выбранного элемента виртуального мира. Позволяет просматривать и изменять параметры нод, материалов, свойств и ассетов.
Asset Browser Window. Инструмент для организации контента в проекте: создания, импорта, просмотра, переименования ассетов, а также перемещения и управления их иерархией.
Просмотр сцены
Окна просмотра виртуальной сцены (вьюпорты) в Unreal Editor и UnigineEditor также очень похожи — это непосредственно само окно просмотра и панель инструментов. Можно использовать несколько вьюпортов.
Unreal Editor Viewport
UNIGINE Editor Viewport
По умолчанию у каждого Editor Viewport есть собственная камера, и вы можете переключаться между камерами в сцене и управлять выбранной аналогично управлению CameraActor в UE (Pilot Actor).
Интерфейс Editor Viewport
В видео есть русские субтитры
Camera Panel служит для переключения между камерами и настройки текущей камеры.
Rendering Debug Panel требуется для отображения содержимого буферов рендеринга так же, как при использовании Buffer Visualization Mode в редакторе Unreal Engine 4.
Navigation Panel используется для быстрой настройки и переключения между пресетами скорости камеры (клавиши 1, 2 и 3), а также для изменения положения камеры.
Панель Helpers обеспечивает быстрый доступ к вспомогательным визуализаторам, таким как иконки, каркасы и элементы контроля.
Навигация внутри Editor Viewport почти такая же, как и во вьюпорте Unreal Engine 4. Подробнее ознакомиться с навигацией по сцене можно, просмотрев видео ниже (либо прочитав соответствующий раздел в документации):
В видео есть русские субтитры
Режимы воспроизведения
В Unreal Editor есть режимы Play In Editor (PIE), запускающий игру в текущем окне Viewport, и Simulate In Editor (SIE) для предварительного просмотра Blueprint логики, анимации и физических симуляций.
В UNIGINE вы можете включить анимацию и симуляцию физики с помощью переключателей на верхней панели инструментов, аналогично режиму SIE в UE.
В C++ проектах доступен еще один тип вьюпорта в UNIGINE — Engine Viewport — дает предварительный просмотр сцены с возможностью управлять текущей камерой, если она установлена.
Для проверки логики приложения потребуется запустить текущий скомпилированный бинарный файл приложения одним из следующих способов:
Через SDK Browser, нажав Run (или кнопку с троеточием для запуска с другими аргументами):
С помощью файлов запуска в папке проекта:
launch_debug — лаунчер отладочной версии проекта.
launch_release — лаунчер релизной версии проекта.
Запустив проект непосредственно из используемой IDE.
По умолчанию курсор мыши захватывается при щелчке во время выполнения, обеспечивая управление движением камеры, и освобождается нажатием Esc. Есть два способа настроить привязки ввода по умолчанию (состояния клавиш и поведение мыши):
В настройках управления.
Через код.
Консоль
Как в Unreal Engine 4, так и в UNIGINE есть окно консоли для стандартного ввода, вывода и регистрации ошибок. Также существует набор консольных команд, позволяющих совершать определенные операции.
Консоль доступна как в UNIGINE Editor, так и в работающем приложении. Чтобы открыть окно консоли в редакторе, перейдите в меню Windows -> Console:
Во время работы приложения встроенная консоль запускается нажатием кнопки «Тильда» (~).
В консоль можно выводить сообщения из кода.
Подготовка финального билда
Так же как и Unreal Engine 4 Editor, UNIGINE Editor позволяет выполнить подготовку финальной сборки проекта.
Проекты и файлы
Папки и файлы
Проект в UNIGINE, как и проект на Unreal Engine 4, хранится в отдельной папке, настройки проекта хранятся в файле с расширением *.project. В папке проекта есть различные подпапки с контентом и исходным кодом приложения. Также тут хранятся папки с файлами конфигурации и исполняемыми файлами. Основные папки для работы: data (контент) и source (исходный код).
Как и папка Content проекта на Unreal Engine 4, папка data хранит ресурсы вашего проекта. Для импорта ассетов достаточно поместить в нее нужные файлы — они автоматически импортируются и станут доступны в Asset Browser, также можно импортировать файлы перетаскиванием прямо в окно Asset Browser. Ассеты в UNIGINE Editor будут автоматически обновляться при внесении изменений в соответствующие файлы.
Соответствие содержимого папки data в корневой директории проекта и в Asset Browser
Папка core содержит стандартные встроенные ресурсы. Эти ассеты доступны только для чтения и доступны для каждого проекта по умолчанию.
Поддержка типов файлов
UNIGINE, как и UE, поддерживает наиболее часто используемые типы файлов и некоторые специфические:
Типы ассетов
Поддерживаемые форматы
Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl
Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more
Звук и видео
.wav, .mp3, .oga/.ogg, .ogv
Шрифты
.ttf
Перенос ассетов из Unreal Engine 4
Меши. Модели в формате FBX, использованные в UE, можно легко импортировать в UNIGINE, отметив необходимые параметры импорта. Важно иметь в виду, что основной единицей измерения в UNIGINE является 1 метр, а в Unreal Engine 4 используются сантиметры. Рекомендуется уменьшить масштаб геометрии в 100 раз, установив множитель геометрии Scale в значение 0,01 при импорте. Подробнее про импорт FBX-моделей читайте здесь.
Материалы. Подобно другим движкам, UNIGINE работает с PBR-материалами (Physically Based Materials) и поддерживает Metalness и Specular workflow. Материалы, созданные для моделей в UE, могут быть воссозданы в UNIGINE с использованием базового PBR-материала mesh_base или пользовательского материала, собранного в визуальном редакторе материалов.
Текстуры. Текстуры можно импортировать как прямо из FBX, так и отдельно. Но иногда может потребоваться предварительная подготовка. Например, текстура Shading для материала mesh_base должна хранить карты Metalness, Roughness, Specular и Microfiber в соответствующих каналах (RGBA). Поэтому сначала может понадобиться назначить карты в каналы в редакторе изображений, а затем импортировать ее в UNIGINE. Карты нормалей в UE и UNIGINE совместимы (DirectX-style), поэтому такие текстуры можно использовать без изменений.
Анимации. Если FBX содержит скелетную анимацию, ее также можно импортировать в UNIGINE. При импорте такой модели, включите опцию Import Animations (импорт анимаций) и настройте дополнительные параметры.
Подробнее про импорт разных ассетов читайте здесь.
Работа с уровнями (3D-сценами)
Концепция сцены в обоих движках одинакова. Однако Unreal Engine 4 и UNIGINE используют разные системы координат.
В Unreal Engine 4 начальный уровень проекта задается в настройках проекта (Project Settings -> Maps & Modes) для приложения и для редактора.
В UNIGINE стартовый мир для приложения можно указать несколькими способами:
в конфигурационном файле configs/default.boot, параметр starting_world;
в параметрах командной строки при запуске:
-console_command "world_load my_world"
при создании сборки проекта (File -> Create Build);
в исходном коде при помощи API класса World.
UnigineEditor также можно запустить с аргументами запуска, хотя зачастую достаточно просто включить Auto Open Last World в настройках редактора, благодаря чему редактор будет запускать последний использованный мир.
Объекты сцены
В этом разделе дается краткое описание основных объектов сцены в обоих движках, а также их основные сходства и различия.
UE4
UNIGINE
World Outliner   
Окно World Nodes
Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами.
Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию.
Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы.
Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды.
Blueprint-классы
Рабочий процесс в UE основан на Blueprint-классах, представляющих собой сложносоставные акторы (или объекты другого типа) из нескольких компонентов, связанных скриптовой логикой.
В UNIGINE вы можете собрать иерархию из нод разного типа с нужными материалами и компонентами логики. Вы можете использовать ноды Dummy для группировки нескольких нод.
Чтобы создать несколько экземпляров составного объекта в вашем мире, сохраните иерархию как Node Reference, которую можно создавать, копировать и редактировать в UNIGINE Editor или во время выполнения столько раз, сколько необходимо.
Чтобы узнать больше о создании Node References и управлении ими, перейдите по ссылке ниже:
Создание экземпляров нод
Видеоруководство: создание экземпляров нод
Совместная работа над проектом
Unreal Editor предоставляет функцию Source Control из коробки. Кроме того, его рабочий процесс многопользовательского редактирования построен на модели сервер-клиент, поддерживая несколько сеансов в общей среде для совместной работы.
В UNIGINE все исходные форматы файлов по умолчанию являются текстовыми, поэтому вы можете использовать любую привычную систему контроля версий и объединять миры, ноды и другие ассеты. Файловую систему можно расширять с помощью Mount Points, которые позволяют добавлять в проект любые внешние ресурсы, находящиеся в совместном доступе. Кроме того, стандартный подход к работе над проектом заключается в разделении работы разных членов команды с помощью отдельных Node Layers. Это позволяет избежать необходимости разрешения конфликтов при слиянии изменений.
Подробнее про совместную работу над проектом читайте здесь.
Камеры
Камеры, основные средства рендеринга 3D сцены устроены немного по-разному в UE и UNIGINE.
В Unreal Engine 4 CameraComponent отвечает за захват вида и отправку его на рендеринг. Обычно вы устанавливаете актера Pawn с прикрепленным CameraComponent в качестве персонажа по умолчанию, указав его в настройках GameMode.
В UNIGINE камеры представлены в мире нодами типа Player . Для упрощения создания наиболее часто используемых камер, управляемых с помощью устройств ввода (клавиатура, мышь, джойстик), предусмотрено несколько типов Player с различным поведением:
Dummy — простая статическая камера, которую можно улучшить с помощью пользовательских доработок.
Spectator — камера свободного перемещения.
Persecutor — камера, которая следует за целевым объектом и может свободно вращаться вокруг него на заданном расстоянии. Это готовое решение для симуляции вида от третьего лица.
Actor — камера с твердым физическим телом капсульной формы, которая может взаимодействовать с окружением. Это готовое решение для симуляции вида от первого лица.
Одновременно Editor Viewport показывает вид только с одной камеры. Переключаться между камерами можно с помощью панели в углу вьюпорта:
Чтобы выбрать определенного плейера камерой по умолчанию, нужно включить опцию Main Player в его настройках. В запущенном приложении мир будет виден, только если в мире есть плейер с этим включенным флагом.
Настройки проекта
Настройка общих параметров проекта в Unreal Editor обычно выполняется через окно Project Settings. Аудио, рендеринг, физика, управление и другие настройки общие для всего проекта. Кроме того, панель World Settings содержит настройки для текущего уровня.
В UNIGINE общие настройки доступны в меню Windows -> Settings в разделе Runtime. Настройки World задаются для каждого мира отдельно.
Сохраненные конфигурации
Вы используете кнопки Export и Import в настройках проекта в Unreal Editor, чтобы сохранить значения настроек во внешний файл конфигурации (.ini) и загрузить их при необходимости.
UNIGINE позволяет сохранять пресеты настроек физики, звука и рендеринга в виде ассетов с расширениями *.physics, *.sound и *.render соответственно. Быстрое переключение между пресетами возможно в окне Settings.
По умолчанию в проекте доступны стандартные пресеты для нескольких уровней качества в папке data/template_render_settings.
В UNIGINE пресеты доступны не только в редакторе. При помощи классов Physics, Sound и Render можно переключиться между пресетами, например, для смены уровней качества визуализации в приложении.
Графика
В Unreal Engine 4 настройки качества графики в основном собраны в разделе Engine -> Rendering.
В UNIGINE настройки рендеринга мира можно найти в разделе Rendering окна Settings. Также есть возможность включать и выключать самые распространенные функции рендеринга с помощью соответствующего меню:
В UNIGINE нет платформо-зависимых настроек качества, поэтому для управления уровнями качества понадобится собственная логика. Для этой цели можно использовать пресеты рендеринга.
Отложенное и прямое затенение
По умолчанию Unreal Engine 4 использует Deferred Renderer. В некоторых случаях Forward Shading Renderer обеспечивает лучшую производительность.

UNIGINE имеет фиксированную последовательность рендеринга, представленную комбинацией отложенного рендеринга с методами прямого рендеринга:
Вся непрозрачная геометрия отрисовывается в отложенном проходе (Deferred).
Прозрачная геометрия отрисовывается во время прямого прохода (Forward).
Вы можете уменьшить вычислительную нагрузку, пропустив определенные этапы рендеринга. Посмотрите специальный видеоурок по использованию инструмента Microprofile для оптимизации рендеринга:
Постобработка
Unreal Engine 4 использует PostProcessVolume для определения объемов, в которых параметры и эффекты постобработки локально (или глобально) переопределяются, параметры смешиваются с использованием линейной интерполяции. В UNIGINE понадобится собственная логика, если нужно плавно смешивать настройки в разных объемах.
В этом разделе перечислены все распространенные методы постобработки Unreal Engine 4, которые также могут быть реализованы в UNIGINE.
UE4
UNIGINE
Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.   
Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares
Bloom
Filmic Tonemapper
White Balance
Dirt Mask
Lens Flare
Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT
Depth of Field
Depth of Field
Post Process Materials
Postprocess Materials
Chromatic Aberration
Материал постобработки post_color_correction   
Film Grain
Screen Space Reflections
SSR
Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion
Screen Space Global Illumination
SSRTGI
Contact Shadows
Screen Space Shadows
Motion Blur
Motion Blur
Screen Percentage
Supersampling
На этом пока все. Напоминаем, что это — лишь первый, обобщенный выпуск из запланированных трех по миграции с Unreal Engine 4. Следующий выпуск будет более специализированным и расскажет про миграцию на UNIGINE с точки зрения 3D-художника. А в последнем разберем все важные моменты по этому вопросу для программистов.
Чтобы получить доступ к бесплатной версии UNIGINE 2 Community заполните форму на нашем сайте.
Все комплектации UNIGINE:
Community — базовая версия для любителей и независимых разработчиков. Достаточна для разработки видеоигр большинства популярных жанров (включая VR).
Engineering — расширенная, специализированная версия. Включает множество заготовок для инженерных задач.
Sim — максимальная версия платформы под масштабные проекты (размеров планеты и даже больше) с готовыми механизмами симуляции.
Подробнее о комплектациях и ценах Основные термины, управление проектами, интерфейс редактора, работа со сценой, настройки проекта и другое.   Если вы планируете переходить с иностранного софта на отечественный и ищете полноценный аналог Unreal Engine 4, то одним из вариантов может стать продукция нашей компании, полностью готовая к импортозамещению. UNIGINE использует общепринятые интерфейсы и рабочие процессы, которые могут быть вам знакомы по работе с другими 3D-инструментами. По опыту наших клиентов, для перехода на UNIGINE с других платформ уходит не более 1–2 недель. Далее в статье рассмотрим базовую информацию по переходу на UNIGINE с Unreal Engine 4. Основные термины Сначала разберемся с названиями различных сущностей и другими терминами. В таблице ниже приведены термины Unreal Engine 4 и их точные или приблизительные эквиваленты в UNIGINE. Категория
UE4
UNIGINE
Управление проектами и SDK
Epic Games Launcher
SDK Browser
Интерфейс редактора
World Outliner
Окно World Nodes
Details Panel
Окно Parameters
Content Browser
Окно Asset Browser
Viewport
Editor Viewport
Сцена
Level
World
Компоненты геймплея
Actor, Pawn
Node
Blueprint Class
NodeReference + Component System
Меши
Static Mesh
Static Mesh, Dynamic Mesh
Skeletal Mesh
Skinned Mesh
Эффекты
Effect, Particle, Cascade
Particle System
Post Process Materials
Скриптовые материалы
Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects
Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling)
Color Grading, Tone Mapping
Цветокоррекция
Экстерьеры
Terrain
Landscape Terrain / Global Terrain
Foliage
Mesh Clutter
Grass
Volumetric Clouds
Volumetric Clouds
Water Meshing System
Система симуляции воды
Освещение
Lights
Источники света
Lightmass
Lightmaps
Light Propagation Volumes
GI на основе вокселей
Sphere Reflection Capture
Environment Probe
Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination
Графический интерфейс
UMG (Unreal Motion Graphics)
GUI
Материалы
Material Editor
Редактор материалов
Material
Базовый материал
Material Instance
Пользовательский материал
Программирование
C++
C++ / C#
Blueprint
UnigineScript
Физика
Line Trace
getIntersection
Primitive Component
Rigid Body
Collision
Shape
Physics Constraint
Joint
Анимация
Sequencer
Tracker Категория
UE4
UNIGINE
Управление проектами и SDK
Epic Games Launcher
SDK Browser
Интерфейс редактора
World Outliner
Окно World Nodes
Details Panel
Окно Parameters
Content Browser
Окно Asset Browser
Viewport
Editor Viewport
Сцена
Level
World
Компоненты геймплея
Actor, Pawn
Node
Blueprint Class
NodeReference + Component System
Меши
Static Mesh
Static Mesh, Dynamic Mesh
Skeletal Mesh
Skinned Mesh
Эффекты
Effect, Particle, Cascade
Particle System
Post Process Materials
Скриптовые материалы
Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects
Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling)
Color Grading, Tone Mapping
Цветокоррекция
Экстерьеры
Terrain
Landscape Terrain / Global Terrain
Foliage
Mesh Clutter
Grass
Volumetric Clouds
Volumetric Clouds
Water Meshing System
Система симуляции воды
Освещение
Lights
Источники света
Lightmass
Lightmaps
Light Propagation Volumes
GI на основе вокселей
Sphere Reflection Capture
Environment Probe
Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination
Графический интерфейс
UMG (Unreal Motion Graphics)
GUI
Материалы
Material Editor
Редактор материалов
Material
Базовый материал
Material Instance
Пользовательский материал
Программирование
C++
C++ / C#
Blueprint
UnigineScript
Физика
Line Trace
getIntersection
Primitive Component
Rigid Body
Collision
Shape
Physics Constraint
Joint
Анимация
Sequencer
Tracker Категория
UE4
UNIGINE
Управление проектами и SDK
Epic Games Launcher
SDK Browser
Интерфейс редактора
World Outliner
Окно World Nodes
Details Panel
Окно Parameters
Content Browser
Окно Asset Browser
Viewport
Editor Viewport
Сцена
Level
World
Компоненты геймплея
Actor, Pawn
Node
Blueprint Class
NodeReference + Component System
Меши
Static Mesh
Static Mesh, Dynamic Mesh
Skeletal Mesh
Skinned Mesh
Эффекты
Effect, Particle, Cascade
Particle System
Post Process Materials
Скриптовые материалы
Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects
Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling)
Color Grading, Tone Mapping
Цветокоррекция
Экстерьеры
Terrain
Landscape Terrain / Global Terrain
Foliage
Mesh Clutter
Grass
Volumetric Clouds
Volumetric Clouds
Water Meshing System
Система симуляции воды
Освещение
Lights
Источники света
Lightmass
Lightmaps
Light Propagation Volumes
GI на основе вокселей
Sphere Reflection Capture
Environment Probe
Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination
Графический интерфейс
UMG (Unreal Motion Graphics)
GUI
Материалы
Material Editor
Редактор материалов
Material
Базовый материал
Material Instance
Пользовательский материал
Программирование
C++
C++ / C#
Blueprint
UnigineScript
Физика
Line Trace
getIntersection
Primitive Component
Rigid Body
Collision
Shape
Physics Constraint
Joint
Анимация
Sequencer
Tracker Категория
UE4
UNIGINE
Управление проектами и SDK
Epic Games Launcher
SDK Browser
Интерфейс редактора
World Outliner
Окно World Nodes
Details Panel
Окно Parameters
Content Browser
Окно Asset Browser
Viewport
Editor Viewport
Сцена
Level
World
Компоненты геймплея
Actor, Pawn
Node
Blueprint Class
NodeReference + Component System
Меши
Static Mesh
Static Mesh, Dynamic Mesh
Skeletal Mesh
Skinned Mesh
Эффекты
Effect, Particle, Cascade
Particle System
Post Process Materials
Скриптовые материалы
Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects
Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling)
Color Grading, Tone Mapping
Цветокоррекция
Экстерьеры
Terrain
Landscape Terrain / Global Terrain
Foliage
Mesh Clutter
Grass
Volumetric Clouds
Volumetric Clouds
Water Meshing System
Система симуляции воды
Освещение
Lights
Источники света
Lightmass
Lightmaps
Light Propagation Volumes
GI на основе вокселей
Sphere Reflection Capture
Environment Probe
Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination
Графический интерфейс
UMG (Unreal Motion Graphics)
GUI
Материалы
Material Editor
Редактор материалов
Material
Базовый материал
Material Instance
Пользовательский материал
Программирование
C++
C++ / C#
Blueprint
UnigineScript
Физика
Line Trace
getIntersection
Primitive Component
Rigid Body
Collision
Shape
Physics Constraint
Joint
Анимация
Sequencer
Tracker Категория
UE4
UNIGINE Категория Категория Категория Категория UE4 UE4 UE4 UE4 UNIGINE UNIGINE UNIGINE UNIGINE Управление проектами и SDK
Epic Games Launcher
SDK Browser Управление проектами и SDK Управление проектами и SDK Управление проектами и SDK Epic Games Launcher Epic Games Launcher SDK Browser SDK Browser Интерфейс редактора
World Outliner
Окно World Nodes Интерфейс редактора Интерфейс редактора Интерфейс редактора World Outliner World Outliner Окно World Nodes Окно World Nodes World Nodes World Nodes Details Panel
Окно Parameters Details Panel Details Panel Окно Parameters Окно Parameters Parameters Parameters Content Browser
Окно Asset Browser Content Browser Content Browser Окно Asset Browser Окно Asset Browser Asset Browser Asset Browser Viewport
Editor Viewport Viewport Viewport Editor Viewport Editor Viewport Editor Viewport Editor Viewport Сцена
Level
World Сцена Сцена Сцена Level Level World World World World Компоненты геймплея
Actor, Pawn
Node Компоненты геймплея Компоненты геймплея Компоненты геймплея Actor, Pawn Actor, Pawn Node Node Node Node Blueprint Class
NodeReference + Component System Blueprint Class Blueprint Class NodeReference + Component System NodeReference + Component System NodeReference NodeReference Component System Component System Меши
Static Mesh
Static Mesh, Dynamic Mesh Меши Меши Меши Static Mesh Static Mesh Static Mesh, Dynamic Mesh Static Mesh, Dynamic Mesh Static Mesh Static Mesh Dynamic Mesh Dynamic Mesh Skeletal Mesh
Skinned Mesh Skeletal Mesh Skeletal Mesh Skinned Mesh Skinned Mesh Skinned Mesh Skinned Mesh Эффекты
Effect, Particle, Cascade
Particle System Эффекты Эффекты Эффекты Effect, Particle, Cascade Effect, Particle, Cascade Particle System Particle System Particle System Particle System Post Process Materials
Скриптовые материалы Post Process Materials Post Process Materials Скриптовые материалы Скриптовые материалы Скриптовые материалы Скриптовые материалы Auto Exposure, Bloom, Depth of Field, Lens Flare
Camera Effects Auto Exposure, Bloom, Depth of Field, Lens Flare Auto Exposure, Bloom, Depth of Field, Lens Flare Camera Effects Camera Effects Camera Effects Camera Effects Anti-Aliasing
Anti-Aliasing (TAA, FXAA, SRAA, Supersampling) Anti-Aliasing Anti-Aliasing Anti-Aliasing (TAA, FXAA, SRAA, Supersampling) Anti-Aliasing (TAA, FXAA, SRAA, Supersampling) Anti-Aliasing (TAA, FXAA, SRAA, Supersampling) Anti-Aliasing (TAA, FXAA, SRAA, Supersampling) Color Grading, Tone Mapping
Цветокоррекция Color Grading, Tone Mapping Color Grading, Tone Mapping Цветокоррекция Цветокоррекция Цветокоррекция Цветокоррекция Экстерьеры
Terrain
Landscape Terrain / Global Terrain Экстерьеры Экстерьеры Экстерьеры Terrain Terrain Landscape Terrain / Global Terrain Landscape Terrain / Global Terrain Landscape Terrain / Global Terrain Landscape Terrain / Global Terrain Foliage
Mesh Clutter
Grass Foliage Foliage Mesh Clutter
Grass Mesh Clutter Mesh Clutter Mesh Clutter Grass Grass Grass Volumetric Clouds
Volumetric Clouds Volumetric Clouds Volumetric Clouds Volumetric Clouds Volumetric Clouds Volumetric Clouds Volumetric Clouds Water Meshing System
Система симуляции воды Water Meshing System Water Meshing System Система симуляции воды Система симуляции воды Система симуляции воды Система симуляции воды Освещение
Lights
Источники света Освещение Освещение Освещение Lights Lights Источники света Источники света Источники света Источники света Lightmass
Lightmaps Lightmass Lightmass Lightmaps Lightmaps Lightmaps Lightmaps Light Propagation Volumes
GI на основе вокселей Light Propagation Volumes Light Propagation Volumes GI на основе вокселей GI на основе вокселей GI на основе вокселей GI на основе вокселей Sphere Reflection Capture
Environment Probe Sphere Reflection Capture Sphere Reflection Capture Environment Probe Environment Probe Environment Probe Environment Probe Screen Space Global Illumination
Screen-Space Ray-Traced Global Illumination Screen Space Global Illumination Screen Space Global Illumination Screen-Space Ray-Traced Global Illumination Screen-Space Ray-Traced Global Illumination Screen-Space Ray-Traced Global Illumination Screen-Space Ray-Traced Global Illumination Графический интерфейс
UMG (Unreal Motion Graphics)
GUI Графический интерфейс Графический интерфейс Графический интерфейс UMG (Unreal Motion Graphics) UMG (Unreal Motion Graphics) GUI GUI GUI GUI Материалы
Material Editor
Редактор материалов Материалы Материалы Материалы Material Editor Material Editor Редактор материалов Редактор материалов Редактор материалов Редактор материалов Material
Базовый материал Material Material Базовый материал Базовый материал Базовый материал Базовый материал Material Instance
Пользовательский материал Material Instance Material Instance Пользовательский материал Пользовательский материал Пользовательский материал Пользовательский материал Программирование
C++
C++ / C# Программирование Программирование Программирование C++ C++ C++ / C# C++ / C# C++ C++ C# C# Blueprint
UnigineScript Blueprint Blueprint UnigineScript UnigineScript UnigineScript UnigineScript Физика
Line Trace
getIntersection Физика Физика Физика Line Trace Line Trace getIntersection getIntersection getIntersection getIntersection Primitive Component
Rigid Body Primitive Component Primitive Component Rigid Body Rigid Body Rigid Body Rigid Body Collision
Shape Collision Collision Shape Shape Shape Shape Physics Constraint
Joint Physics Constraint Physics Constraint Joint Joint Joint Joint Анимация
Sequencer
Tracker Анимация Анимация Анимация Sequencer Sequencer Tracker Tracker Tracker Tracker Управление проектами Пользователи Unreal Engine 4 используют Epic Games Launcher — приложение, которое упрощает поиск, загрузку и управление вашими проектами и установками. Кроме того, можно управлять своими проектами напрямую через Unreal Editor: создавать новый проект и переключаться между существующими. Unreal Engine 4 Epic Games Launcher Unreal Editor В UNIGINE для этих целей служит UNIGINE SDK Browser. Помимо управления проектами и установленными SDK, браузер SDK предоставляет доступ к примерам (Samples), базе знаний (Knowledge) и дополнениям (Add-Ons). В последнюю категорию входят различные 3D-модели и материалы, в том числе растительность, спецэффекты, погодные эффекты и другое. UNIGINE SDK Browser Samples Knowledge Add-Ons   Также заметным отличием UNIGINE является возможность создания нового (или редактирование старого) проекта с поддержкой одного из нескольких языков программирования: C++, C# и UnigineScript. Для пользователей Unreal Engine 4 рекомендуется использовать C++. Также возможно использование нескольких языков программирования в одном проекте. C++ C# UnigineScript C++ Как создать новый проект на C++ в SDK Browser Нажмите Create New в разделе My Projects.
Выберите тип проекта C++ (Visual Studio 2015+) в поле API + IDE.
Если требуется поддержка VR-гарнитур, выберите шаблон проекта VR (поле Template). Это активирует необходимые плагины и добавит нужный контент (больше о поддержке VR-устройств здесь).
Нажмите Create New Project.
После завершения загрузки нажмите Open Editor, чтобы запустить UNIGINE Editor; нажмите Open Code IDE, чтобы открыть исходный код проекта через IDE по умолчанию. Нажмите Create New в разделе My Projects. Нажмите Create New в разделе My Projects. Create New My Projects Выберите тип проекта C++ (Visual Studio 2015+) в поле API + IDE. Выберите тип проекта C++ (Visual Studio 2015+) в поле API + IDE. C++ (Visual Studio 2015+) API + IDE Если требуется поддержка VR-гарнитур, выберите шаблон проекта VR (поле Template). Это активирует необходимые плагины и добавит нужный контент (больше о поддержке VR-устройств здесь). Если требуется поддержка VR-гарнитур, выберите шаблон проекта VR (поле Template). Это активирует необходимые плагины и добавит нужный контент (больше о поддержке VR-устройств здесь). VR Template здесь здесь Нажмите Create New Project. Нажмите Create New Project. Create New Project После завершения загрузки нажмите Open Editor, чтобы запустить UNIGINE Editor; нажмите Open Code IDE, чтобы открыть исходный код проекта через IDE по умолчанию. После завершения загрузки нажмите Open Editor, чтобы запустить UNIGINE Editor; нажмите Open Code IDE, чтобы открыть исходный код проекта через IDE по умолчанию. Open Editor Open Code IDE Интерфейс редактора Элементы интерфейсов Unreal Editor и UNIGINE Editor близки по функционалу: на схеме ниже они окрашены в похожие цвета. Расположение элементов UNIGINE Editor можно настраивать, перетаскивая и изменяя их размер. В UNIGINE по умолчанию используется темная тема. Unreal Editor UNIGINE Editor   Toolbar. Панель инструментов, которая обеспечивает доступ к инструментам позиционирования, а также элементам управления логикой приложения, воспроизведением звука, симуляцией физики, компиляцией шейдеров и запеканием света.
World Hierarchy Window. Инструмент для работы с иерархией нод. Позволяет организовывать ноды в иерархию, а также добавлять, удалять, клонировать и переименовывать их.
Editor Viewport. Просмотр трехмерной сцены. Позволяет визуально перемещаться и редактировать виртуальный мир.
Parameters Window. Окно параметров выбранного элемента виртуального мира. Позволяет просматривать и изменять параметры нод, материалов, свойств и ассетов.
Asset Browser Window. Инструмент для организации контента в проекте: создания, импорта, просмотра, переименования ассетов, а также перемещения и управления их иерархией. Toolbar. Панель инструментов, которая обеспечивает доступ к инструментам позиционирования, а также элементам управления логикой приложения, воспроизведением звука, симуляцией физики, компиляцией шейдеров и запеканием света. Toolbar. Панель инструментов, которая обеспечивает доступ к инструментам позиционирования, а также элементам управления логикой приложения, воспроизведением звука, симуляцией физики, компиляцией шейдеров и запеканием света. Toolbar. World Hierarchy Window. Инструмент для работы с иерархией нод. Позволяет организовывать ноды в иерархию, а также добавлять, удалять, клонировать и переименовывать их. World Hierarchy Window. Инструмент для работы с иерархией нод. Позволяет организовывать ноды в иерархию, а также добавлять, удалять, клонировать и переименовывать их. World Hierarchy Window. Editor Viewport. Просмотр трехмерной сцены. Позволяет визуально перемещаться и редактировать виртуальный мир. Editor Viewport. Просмотр трехмерной сцены. Позволяет визуально перемещаться и редактировать виртуальный мир. Editor Viewport. Parameters Window. Окно параметров выбранного элемента виртуального мира. Позволяет просматривать и изменять параметры нод, материалов, свойств и ассетов. Parameters Window. Окно параметров выбранного элемента виртуального мира. Позволяет просматривать и изменять параметры нод, материалов, свойств и ассетов. Parameters Window. Asset Browser Window. Инструмент для организации контента в проекте: создания, импорта, просмотра, переименования ассетов, а также перемещения и управления их иерархией. Asset Browser Window. Инструмент для организации контента в проекте: создания, импорта, просмотра, переименования ассетов, а также перемещения и управления их иерархией. Asset Browser Window. Просмотр сцены Окна просмотра виртуальной сцены (вьюпорты) в Unreal Editor и UnigineEditor также очень похожи — это непосредственно само окно просмотра и панель инструментов. Можно использовать несколько вьюпортов. Unreal Editor UnigineEditor несколько вьюпортов несколько вьюпортов  Unreal Editor Viewport  UNIGINE Editor Viewport По умолчанию у каждого Editor Viewport есть собственная камера, и вы можете переключаться между камерами в сцене и управлять выбранной аналогично управлению CameraActor в UE (Pilot Actor). Editor Viewport переключаться между камерами переключаться между камерами CameraActor Интерфейс Editor Viewport  В видео есть русские субтитры В видео есть русские субтитры Camera Panel служит для переключения между камерами и настройки текущей камеры.
Rendering Debug Panel требуется для отображения содержимого буферов рендеринга так же, как при использовании Buffer Visualization Mode в редакторе Unreal Engine 4.
Navigation Panel используется для быстрой настройки и переключения между пресетами скорости камеры (клавиши 1, 2 и 3), а также для изменения положения камеры.
Панель Helpers обеспечивает быстрый доступ к вспомогательным визуализаторам, таким как иконки, каркасы и элементы контроля. Camera Panel служит для переключения между камерами и настройки текущей камеры. Camera Panel служит для переключения между камерами и настройки текущей камеры. Camera Panel Rendering Debug Panel требуется для отображения содержимого буферов рендеринга так же, как при использовании Buffer Visualization Mode в редакторе Unreal Engine 4. Rendering Debug Panel требуется для отображения содержимого буферов рендеринга так же, как при использовании Buffer Visualization Mode в редакторе Unreal Engine 4. Rendering Debug Panel Buffer Visualization Mode Navigation Panel используется для быстрой настройки и переключения между пресетами скорости камеры (клавиши 1, 2 и 3), а также для изменения положения камеры. Navigation Panel используется для быстрой настройки и переключения между пресетами скорости камеры (клавиши 1, 2 и 3), а также для изменения положения камеры. Navigation Panel Панель Helpers обеспечивает быстрый доступ к вспомогательным визуализаторам, таким как иконки, каркасы и элементы контроля. Панель Helpers обеспечивает быстрый доступ к вспомогательным визуализаторам, таким как иконки, каркасы и элементы контроля. Панель Helpers Навигация внутри Editor Viewport почти такая же, как и во вьюпорте Unreal Engine 4. Подробнее ознакомиться с навигацией по сцене можно, просмотрев видео ниже (либо прочитав соответствующий раздел в документации): Editor Viewport документации документации  В видео есть русские субтитры В видео есть русские субтитры Режимы воспроизведения В Unreal Editor есть режимы Play In Editor (PIE), запускающий игру в текущем окне Viewport, и Simulate In Editor (SIE) для предварительного просмотра Blueprint логики, анимации и физических симуляций. Unreal Editor Play In Editor (PIE) Viewport Simulate In Editor (SIE)   В UNIGINE вы можете включить анимацию и симуляцию физики с помощью переключателей на верхней панели инструментов, аналогично режиму SIE в UE. физики физики переключателей переключателей    В C++ проектах доступен еще один тип вьюпорта в UNIGINE — Engine Viewport — дает предварительный просмотр сцены с возможностью управлять текущей камерой, если она установлена. Engine Viewport она установлена она установлена она установлена Для проверки логики приложения потребуется запустить текущий скомпилированный бинарный файл приложения одним из следующих способов: Через SDK Browser, нажав Run (или кнопку с троеточием для запуска с другими аргументами): Через SDK Browser, нажав Run (или кнопку с троеточием для запуска с другими аргументами): Через SDK Browser, нажав Run (или кнопку с троеточием для запуска с другими аргументами): Через SDK Browser Через SDK Browser Run запуска с другими аргументами запуска с другими аргументами    С помощью файлов запуска в папке проекта:
launch_debug — лаунчер отладочной версии проекта.
launch_release — лаунчер релизной версии проекта. С помощью файлов запуска в папке проекта:
launch_debug — лаунчер отладочной версии проекта.
launch_release — лаунчер релизной версии проекта. С помощью файлов запуска в папке проекта: launch_debug — лаунчер отладочной версии проекта.
launch_release — лаунчер релизной версии проекта. launch_debug — лаунчер отладочной версии проекта. launch_debug — лаунчер отладочной версии проекта. launch_release — лаунчер релизной версии проекта. launch_release — лаунчер релизной версии проекта. Запустив проект непосредственно из используемой IDE. Запустив проект непосредственно из используемой IDE. Запустив проект непосредственно из используемой IDE. По умолчанию курсор мыши захватывается при щелчке во время выполнения, обеспечивая управление движением камеры, и освобождается нажатием Esc. Есть два способа настроить привязки ввода по умолчанию (состояния клавиш и поведение мыши): Esc В настройках управления.
Через код. В настройках управления. В настройках управления. управления управления Через код. Через код. код код Консоль Как в Unreal Engine 4, так и в UNIGINE есть окно консоли для стандартного ввода, вывода и регистрации ошибок. Также существует набор консольных команд, позволяющих совершать определенные операции. окно консоли окно консоли консольных команд консольных команд Консоль доступна как в UNIGINE Editor, так и в работающем приложении. Чтобы открыть окно консоли в редакторе, перейдите в меню Windows -> Console: Windows -> Console    Во время работы приложения встроенная консоль запускается нажатием кнопки «Тильда» (~). Тильда» (~)   В консоль можно выводить сообщения из кода. из кода из кода Подготовка финального билда Так же как и Unreal Engine 4 Editor, UNIGINE Editor позволяет выполнить подготовку финальной сборки проекта. Unreal Engine 4 Editor финальной сборки финальной сборки Проекты и файлы Папки и файлы Проект в UNIGINE, как и проект на Unreal Engine 4, хранится в отдельной папке, настройки проекта хранятся в файле с расширением *.project. В папке проекта есть различные подпапки с контентом и исходным кодом приложения. Также тут хранятся папки с файлами конфигурации и исполняемыми файлами. Основные папки для работы: data (контент) и source (исходный код). *.project *.project data source Как и папка Content проекта на Unreal Engine 4, папка data хранит ресурсы вашего проекта. Для импорта ассетов достаточно поместить в нее нужные файлы — они автоматически импортируются и станут доступны в Asset Browser, также можно импортировать файлы перетаскиванием прямо в окно Asset Browser. Ассеты в UNIGINE Editor будут автоматически обновляться при внесении изменений в соответствующие файлы. Content data Asset Browser Asset Browser   Соответствие содержимого папки data в корневой директории проекта и в Asset Browser Папка core содержит стандартные встроенные ресурсы. Эти ассеты доступны только для чтения и доступны для каждого проекта по умолчанию. core core Поддержка типов файлов UNIGINE, как и UE, поддерживает наиболее часто используемые типы файлов и некоторые специфические: часто используемые типы файлов и некоторые специфические часто используемые типы файлов и некоторые специфические Типы ассетов
Поддерживаемые форматы
Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl
Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more
Звук и видео
.wav, .mp3, .oga/.ogg, .ogv
Шрифты
.ttf Типы ассетов
Поддерживаемые форматы
Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl
Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more
Звук и видео
.wav, .mp3, .oga/.ogg, .ogv
Шрифты
.ttf Типы ассетов
Поддерживаемые форматы
Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl
Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more
Звук и видео
.wav, .mp3, .oga/.ogg, .ogv
Шрифты
.ttf Типы ассетов
Поддерживаемые форматы
Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl
Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more
Звук и видео
.wav, .mp3, .oga/.ogg, .ogv
Шрифты
.ttf Типы ассетов
Поддерживаемые форматы Типы ассетов Типы ассетов Типы ассетов Типы ассетов Поддерживаемые форматы Поддерживаемые форматы Поддерживаемые форматы Поддерживаемые форматы Геометрия
.fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl Геометрия Геометрия Геометрия .fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl .fbx, .obj, .3ds, .dae, .glb/.gltf, .stp/.step, .igs/.iges, .brep, .stl Текстуры
.png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more Текстуры Текстуры Текстуры .png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more .png, .jpeg, .tif, .tga, .rgba, .psd, .hdr, .dds, and more Звук и видео
.wav, .mp3, .oga/.ogg, .ogv Звук и видео Звук и видео Звук и видео .wav, .mp3, .oga/.ogg, .ogv .wav, .mp3, .oga/.ogg, .ogv Шрифты
.ttf Шрифты Шрифты Шрифты .ttf .ttf Перенос ассетов из Unreal Engine 4 Меши. Модели в формате FBX, использованные в UE, можно легко импортировать в UNIGINE, отметив необходимые параметры импорта. Важно иметь в виду, что основной единицей измерения в UNIGINE является 1 метр, а в Unreal Engine 4 используются сантиметры. Рекомендуется уменьшить масштаб геометрии в 100 раз, установив множитель геометрии Scale в значение 0,01 при импорте. Подробнее про импорт FBX-моделей читайте здесь. Меши. Модели в формате FBX, использованные в UE, можно легко импортировать в UNIGINE, отметив необходимые параметры импорта. Важно иметь в виду, что основной единицей измерения в UNIGINE является 1 метр, а в Unreal Engine 4 используются сантиметры. Рекомендуется уменьшить масштаб геометрии в 100 раз, установив множитель геометрии Scale в значение 0,01 при импорте. Подробнее про импорт FBX-моделей читайте здесь. Меши. Модели в формате FBX, использованные в UE, можно легко импортировать в UNIGINE, отметив необходимые параметры импорта. Важно иметь в виду, что основной единицей измерения в UNIGINE является 1 метр, а в Unreal Engine 4 используются сантиметры. Рекомендуется уменьшить масштаб геометрии в 100 раз, установив множитель геометрии Scale в значение 0,01 при импорте. Подробнее про импорт FBX-моделей читайте здесь. Меши. импортировать импортировать 1 метр сантиметры 100 раз Scale 0,01 здесь здесь Материалы. Подобно другим движкам, UNIGINE работает с PBR-материалами (Physically Based Materials) и поддерживает Metalness и Specular workflow. Материалы, созданные для моделей в UE, могут быть воссозданы в UNIGINE с использованием базового PBR-материала mesh_base или пользовательского материала, собранного в визуальном редакторе материалов.
Текстуры. Текстуры можно импортировать как прямо из FBX, так и отдельно. Но иногда может потребоваться предварительная подготовка. Например, текстура Shading для материала mesh_base должна хранить карты Metalness, Roughness, Specular и Microfiber в соответствующих каналах (RGBA). Поэтому сначала может понадобиться назначить карты в каналы в редакторе изображений, а затем импортировать ее в UNIGINE. Карты нормалей в UE и UNIGINE совместимы (DirectX-style), поэтому такие текстуры можно использовать без изменений.
Анимации. Если FBX содержит скелетную анимацию, ее также можно импортировать в UNIGINE. При импорте такой модели, включите опцию Import Animations (импорт анимаций) и настройте дополнительные параметры. Материалы. Подобно другим движкам, UNIGINE работает с PBR-материалами (Physically Based Materials) и поддерживает Metalness и Specular workflow. Материалы, созданные для моделей в UE, могут быть воссозданы в UNIGINE с использованием базового PBR-материала mesh_base или пользовательского материала, собранного в визуальном редакторе материалов. Материалы. Подобно другим движкам, UNIGINE работает с PBR-материалами (Physically Based Materials) и поддерживает Metalness и Specular workflow. Материалы, созданные для моделей в UE, могут быть воссозданы в UNIGINE с использованием базового PBR-материала mesh_base или пользовательского материала, собранного в визуальном редакторе материалов. Материалы. PBR-материалами PBR-материалами Physically Based Materials Metalness и Specular workflow Metalness Metalness и Specular workflow Specular workflow mesh_base mesh_base визуальном редакторе материалов визуальном редакторе материалов Текстуры. Текстуры можно импортировать как прямо из FBX, так и отдельно. Но иногда может потребоваться предварительная подготовка. Например, текстура Shading для материала mesh_base должна хранить карты Metalness, Roughness, Specular и Microfiber в соответствующих каналах (RGBA). Поэтому сначала может понадобиться назначить карты в каналы в редакторе изображений, а затем импортировать ее в UNIGINE. Карты нормалей в UE и UNIGINE совместимы (DirectX-style), поэтому такие текстуры можно использовать без изменений. Текстуры. Текстуры можно импортировать как прямо из FBX, так и отдельно. Но иногда может потребоваться предварительная подготовка. Например, текстура Shading для материала mesh_base должна хранить карты Metalness, Roughness, Specular и Microfiber в соответствующих каналах (RGBA). Поэтому сначала может понадобиться назначить карты в каналы в редакторе изображений, а затем импортировать ее в UNIGINE. Карты нормалей в UE и UNIGINE совместимы (DirectX-style), поэтому такие текстуры можно использовать без изменений. Текстуры. импортировать импортировать Shading Shading mesh_base Metalness Roughness Specular Microfiber нормалей нормалей Анимации. Если FBX содержит скелетную анимацию, ее также можно импортировать в UNIGINE. При импорте такой модели, включите опцию Import Animations (импорт анимаций) и настройте дополнительные параметры. Анимации. Если FBX содержит скелетную анимацию, ее также можно импортировать в UNIGINE. При импорте такой модели, включите опцию Import Animations (импорт анимаций) и настройте дополнительные параметры. Анимации. Import Animations Import Animations Import Animations Подробнее про импорт разных ассетов читайте здесь. здесь здесь Работа с уровнями (3D-сценами) Концепция сцены в обоих движках одинакова. Однако Unreal Engine 4 и UNIGINE используют разные системы координат.   В Unreal Engine 4 начальный уровень проекта задается в настройках проекта (Project Settings -> Maps & Modes) для приложения и для редактора. начальный уровень Project Settings -> Maps & Modes) В UNIGINE стартовый мир для приложения можно указать несколькими способами: в конфигурационном файле configs/default.boot, параметр starting_world;
в параметрах командной строки при запуске: в конфигурационном файле configs/default.boot, параметр starting_world; в конфигурационном файле configs/default.boot, параметр starting_world; конфигурационном файле конфигурационном файле configs/default.boot starting_world в параметрах командной строки при запуске: в параметрах командной строки при запуске: -console_command "world_load my_world" -console_command "world_load my_world" при создании сборки проекта (File -> Create Build);
в исходном коде при помощи API класса World. при создании сборки проекта (File -> Create Build); при создании сборки проекта (File -> Create Build); File -> Create Build в исходном коде при помощи API класса World. в исходном коде при помощи API класса World. World World UnigineEditor также можно запустить с аргументами запуска, хотя зачастую достаточно просто включить Auto Open Last World в настройках редактора, благодаря чему редактор будет запускать последний использованный мир. аргументами запуска аргументами запуска Auto Open Last World Объекты сцены В этом разделе дается краткое описание основных объектов сцены в обоих движках, а также их основные сходства и различия. UE4
UNIGINE
World Outliner   
Окно World Nodes
Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами.
Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию.
Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы.
Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. UE4
UNIGINE
World Outliner   
Окно World Nodes
Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами.
Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию.
Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы.
Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. UE4
UNIGINE
World Outliner   
Окно World Nodes
Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами.
Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию.
Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы.
Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. UE4
UNIGINE
World Outliner   
Окно World Nodes
Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами.
Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию.
Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы.
Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. UE4
UNIGINE UE4 UE4 UE4 UE4 UNIGINE UNIGINE UNIGINE UNIGINE World Outliner   
Окно World Nodes World Outliner    World Outliner    Окно World Nodes Окно World Nodes Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем.
Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами. Базовый объект сцены — Actor.
Это базовый объект, который может быть помещен в мир или создан в нем. Базовый объект сцены — Actor. Actor Это базовый объект, который может быть помещен в мир или создан в нем. Базовый тип, от которого наследуются все типы объектов сцены — Node.
Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы.
Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами. Базовый тип, от которого наследуются все типы объектов сцены — Node. Node Некоторые имеют визуальное представление: Objects, Decals и Effects. У каждого из них есть поверхности для представления своей геометрии (меши). Остальные — Light Sources, Players и др. — невидимы. Objects Objects Decals Decals Effects Effects поверхности поверхности Light Sources Light Sources Players Players Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами. Важно. Важно. Все объекты, добавляемые в сцену, независимо от их типа, называются нодами. Actors могут быть организованы в иерархию.
Ноды могут быть организованы в иерархию. Actors могут быть организованы в иерархию. Actors могут быть организованы в иерархию. Ноды могут быть организованы в иерархию. Ноды могут быть организованы в иерархию. Actor — это контейнер для компонентов, определяющих его функциональность.
Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы. Actor — это контейнер для компонентов, определяющих его функциональность. Actor — это контейнер для компонентов, определяющих его функциональность. Базовая функциональность ноды определяется ее типом.
Дополнительные функции можно добавлять с помощью свойств и компонентной системы. Базовая функциональность ноды определяется ее типом. Дополнительные функции можно добавлять с помощью свойств и компонентной системы. свойств свойств компонентной системы компонентной системы Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script.
У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component.
Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script. Положение Actor, вращение и масштаб хранятся в компоненте Scene Component. Обычно Actors имеют корневой компонент-подкласс Scene Component. Actors Программисты могут наследовать UActorComponent по умолчанию, чтобы создавать собственные компоненты с помощью C++ или Blueprint Script. UActorComponent Blueprint Script У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве.
Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. У каждой ноды есть матрица преобразования, которая задает ее положение, поворот и масштаб в пространстве. Программисты могут наследовать классы от ComponentBase, создавать собственные компоненты при помощи C++ и назначать компоненты на ноды. ComponentBase Blueprint-классы Рабочий процесс в UE основан на Blueprint-классах, представляющих собой сложносоставные акторы (или объекты другого типа) из нескольких компонентов, связанных скриптовой логикой. Blueprint-классах В UNIGINE вы можете собрать иерархию из нод разного типа с нужными материалами и компонентами логики. Вы можете использовать ноды Dummy для группировки нескольких нод. иерархию иерархию Dummy Dummy Чтобы создать несколько экземпляров составного объекта в вашем мире, сохраните иерархию как Node Reference, которую можно создавать, копировать и редактировать в UNIGINE Editor или во время выполнения столько раз, сколько необходимо. несколько экземпляров несколько экземпляров Node Reference Node Reference редактировать редактировать    Чтобы узнать больше о создании Node References и управлении ими, перейдите по ссылке ниже: Node References Создание экземпляров нод
Видеоруководство: создание экземпляров нод Создание экземпляров нод Создание экземпляров нод Создание экземпляров нод Создание экземпляров нод Видеоруководство: создание экземпляров нод Видеоруководство: создание экземпляров нод создание экземпляров нод создание экземпляров нод Совместная работа над проектом Unreal Editor предоставляет функцию Source Control из коробки. Кроме того, его рабочий процесс многопользовательского редактирования построен на модели сервер-клиент, поддерживая несколько сеансов в общей среде для совместной работы. Source Control В UNIGINE все исходные форматы файлов по умолчанию являются текстовыми, поэтому вы можете использовать любую привычную систему контроля версий и объединять миры, ноды и другие ассеты. Файловую систему можно расширять с помощью Mount Points, которые позволяют добавлять в проект любые внешние ресурсы, находящиеся в совместном доступе. Кроме того, стандартный подход к работе над проектом заключается в разделении работы разных членов команды с помощью отдельных Node Layers. Это позволяет избежать необходимости разрешения конфликтов при слиянии изменений. Mount Points Mount Points Mount Points Node Layers Node Layers Подробнее про совместную работу над проектом читайте здесь. здесь здесь Камеры Камеры, основные средства рендеринга 3D сцены устроены немного по-разному в UE и UNIGINE. В Unreal Engine 4 CameraComponent отвечает за захват вида и отправку его на рендеринг. Обычно вы устанавливаете актера Pawn с прикрепленным CameraComponent в качестве персонажа по умолчанию, указав его в настройках GameMode. В Unreal Engine 4 CameraComponent отвечает за захват вида и отправку его на рендеринг. CameraComponent Pawn CameraComponent GameMode В UNIGINE камеры представлены в мире нодами типа Player . Для упрощения создания наиболее часто используемых камер, управляемых с помощью устройств ввода (клавиатура, мышь, джойстик), предусмотрено несколько типов Player с различным поведением: В UNIGINE камеры представлены в мире нодами типа Player Player Player Player . Player Dummy — простая статическая камера, которую можно улучшить с помощью пользовательских доработок.
Spectator — камера свободного перемещения.
Persecutor — камера, которая следует за целевым объектом и может свободно вращаться вокруг него на заданном расстоянии. Это готовое решение для симуляции вида от третьего лица.
Actor — камера с твердым физическим телом капсульной формы, которая может взаимодействовать с окружением. Это готовое решение для симуляции вида от первого лица. Dummy — простая статическая камера, которую можно улучшить с помощью пользовательских доработок. Dummy — простая статическая камера, которую можно улучшить с помощью пользовательских доработок. Dummy Dummy Dummy Spectator — камера свободного перемещения. Spectator — камера свободного перемещения. Spectator Spectator Spectator Persecutor — камера, которая следует за целевым объектом и может свободно вращаться вокруг него на заданном расстоянии. Это готовое решение для симуляции вида от третьего лица. Persecutor — камера, которая следует за целевым объектом и может свободно вращаться вокруг него на заданном расстоянии. Это готовое решение для симуляции вида от третьего лица. Persecutor Persecutor Persecutor Actor — камера с твердым физическим телом капсульной формы, которая может взаимодействовать с окружением. Это готовое решение для симуляции вида от первого лица. Actor — камера с твердым физическим телом капсульной формы, которая может взаимодействовать с окружением. Это готовое решение для симуляции вида от первого лица. Actor Actor Actor Одновременно Editor Viewport показывает вид только с одной камеры. Переключаться между камерами можно с помощью панели в углу вьюпорта:    Чтобы выбрать определенного плейера камерой по умолчанию, нужно включить опцию Main Player в его настройках. В запущенном приложении мир будет виден, только если в мире есть плейер с этим включенным флагом. Main Player Настройки проекта Настройка общих параметров проекта в Unreal Editor обычно выполняется через окно Project Settings. Аудио, рендеринг, физика, управление и другие настройки общие для всего проекта. Кроме того, панель World Settings содержит настройки для текущего уровня. Project Settings World Settings В UNIGINE общие настройки доступны в меню Windows -> Settings в разделе Runtime. Настройки World задаются для каждого мира отдельно. Windows Settings Runtime Сохраненные конфигурации Вы используете кнопки Export и Import в настройках проекта в Unreal Editor, чтобы сохранить значения настроек во внешний файл конфигурации (.ini) и загрузить их при необходимости. Export Import Unreal Editor .ini .ini    UNIGINE позволяет сохранять пресеты настроек физики, звука и рендеринга в виде ассетов с расширениями *.physics, *.sound и *.render соответственно. Быстрое переключение между пресетами возможно в окне Settings. сохранять пресеты сохранять пресеты *.physics *.physics *.sound *.sound *.render *.render Settings    По умолчанию в проекте доступны стандартные пресеты для нескольких уровней качества в папке data/template_render_settings. data/template_render_settings В UNIGINE пресеты доступны не только в редакторе. При помощи классов Physics, Sound и Render можно переключиться между пресетами, например, для смены уровней качества визуализации в приложении. Physics Sound Render Графика В Unreal Engine 4 настройки качества графики в основном собраны в разделе Engine -> Rendering. Engine -> Rendering В UNIGINE настройки рендеринга мира можно найти в разделе Rendering окна Settings. Также есть возможность включать и выключать самые распространенные функции рендеринга с помощью соответствующего меню: Rendering Settings    В UNIGINE нет платформо-зависимых настроек качества, поэтому для управления уровнями качества понадобится собственная логика. Для этой цели можно использовать пресеты рендеринга. Отложенное и прямое затенение По умолчанию Unreal Engine 4 использует Deferred Renderer. В некоторых случаях Forward Shading Renderer обеспечивает лучшую производительность. Unreal Engine 4 Deferred Renderer Forward Shading Renderer UNIGINE имеет фиксированную последовательность рендеринга, представленную комбинацией отложенного рендеринга с методами прямого рендеринга:  последовательность рендеринга последовательность рендеринга последовательность рендеринга Вся непрозрачная геометрия отрисовывается в отложенном проходе (Deferred).
Прозрачная геометрия отрисовывается во время прямого прохода (Forward). Вся непрозрачная геометрия отрисовывается в отложенном проходе (Deferred). Вся непрозрачная геометрия отрисовывается в отложенном проходе (Deferred). непрозрачная непрозрачная Deferred Прозрачная геометрия отрисовывается во время прямого прохода (Forward). Прозрачная геометрия отрисовывается во время прямого прохода (Forward). Прозрачная Прозрачная Forward Вы можете уменьшить вычислительную нагрузку, пропустив определенные этапы рендеринга. Посмотрите специальный видеоурок по использованию инструмента Microprofile для оптимизации рендеринга: Microprofile Microprofile Microprofile  Постобработка Unreal Engine 4 использует PostProcessVolume для определения объемов, в которых параметры и эффекты постобработки локально (или глобально) переопределяются, параметры смешиваются с использованием линейной интерполяции. В UNIGINE понадобится собственная логика, если нужно плавно смешивать настройки в разных объемах. Unreal Engine 4 PostProcessVolume В этом разделе перечислены все распространенные методы постобработки Unreal Engine 4, которые также могут быть реализованы в UNIGINE. UE4
UNIGINE
Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.   
Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares
Bloom
Filmic Tonemapper
White Balance
Dirt Mask
Lens Flare
Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT
Depth of Field
Depth of Field
Post Process Materials
Postprocess Materials
Chromatic Aberration
Материал постобработки post_color_correction   
Film Grain
Screen Space Reflections
SSR
Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion
Screen Space Global Illumination
SSRTGI
Contact Shadows
Screen Space Shadows
Motion Blur
Motion Blur
Screen Percentage
Supersampling UE4
UNIGINE
Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.   
Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares
Bloom
Filmic Tonemapper
White Balance
Dirt Mask
Lens Flare
Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT
Depth of Field
Depth of Field
Post Process Materials
Postprocess Materials
Chromatic Aberration
Материал постобработки post_color_correction   
Film Grain
Screen Space Reflections
SSR
Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion
Screen Space Global Illumination
SSRTGI
Contact Shadows
Screen Space Shadows
Motion Blur
Motion Blur
Screen Percentage
Supersampling UE4
UNIGINE
Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.   
Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares
Bloom
Filmic Tonemapper
White Balance
Dirt Mask
Lens Flare
Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT
Depth of Field
Depth of Field
Post Process Materials
Postprocess Materials
Chromatic Aberration
Материал постобработки post_color_correction   
Film Grain
Screen Space Reflections
SSR
Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion
Screen Space Global Illumination
SSRTGI
Contact Shadows
Screen Space Shadows
Motion Blur
Motion Blur
Screen Percentage
Supersampling UE4
UNIGINE
Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.   
Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares
Bloom
Filmic Tonemapper
White Balance
Dirt Mask
Lens Flare
Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT
Depth of Field
Depth of Field
Post Process Materials
Postprocess Materials
Chromatic Aberration
Материал постобработки post_color_correction   
Film Grain
Screen Space Reflections
SSR
Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion
Screen Space Global Illumination
SSRTGI
Contact Shadows
Screen Space Shadows
Motion Blur
Motion Blur
Screen Percentage
Supersampling UE4
UNIGINE UE4 UE4 UE4 UE4 UNIGINE UNIGINE UNIGINE UNIGINE Методы сглаживания:
FXAA
MSAA
TAA
Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.    Методы сглаживания:
FXAA
MSAA
TAA Методы сглаживания: FXAA MSAA TAA Методы сглаживания:
Fast approximate anti-aliasing (FXAA)
Temporal anti-aliasing (TAA).
Subpixel Reconstruction Anti-Aliasing (SRAA).
Supersampling.    Методы сглаживания: сглаживания сглаживания Fast approximate anti-aliasing (FXAA) Fast approximate anti-aliasing (FXAA) Fast approximate anti-aliasing (FXAA) Temporal anti-aliasing (TAA). Temporal anti-aliasing (TAA) Temporal anti-aliasing (TAA) Subpixel Reconstruction Anti-Aliasing (SRAA). Subpixel Reconstruction Anti-Aliasing (SRAA) Subpixel Reconstruction Anti-Aliasing (SRAA) Supersampling.    Supersampling Supersampling Eye Adaptation (Auto-Exposure)
Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares Eye Adaptation (Auto-Exposure) Eye Adaptation (Auto-Exposure) Эффекты камеры:   
Adaptive Exposure
Bloom
Tone mapping
White Balance
Lens Dirt
Lens Flares Эффекты камеры:    Adaptive Exposure Adaptive Exposure Adaptive Exposure Bloom Bloom Bloom Tone mapping Tone mapping Tone mapping White Balance White Balance White Balance Lens Dirt Lens Dirt Lens Dirt Lens Flares Lens Flares Lens Flares Bloom Bloom Bloom Filmic Tonemapper Filmic Tonemapper Filmic Tonemapper White Balance White Balance White Balance Dirt Mask Dirt Mask Dirt Mask Lens Flare Lens Flare Lens Flare Color Grading LUT (Lookup Texture)
Color Correction
Color Correction LUT Color Grading LUT (Lookup Texture) Color Grading LUT (Lookup Texture) Color Correction
Color Correction LUT Color Correction Color Correction Color Correction Color Correction LUT Color Correction LUT Color Correction LUT Depth of Field
Depth of Field Depth of Field Depth of Field Depth of Field Depth of Field Depth of Field Depth of Field Post Process Materials
Postprocess Materials Post Process Materials Post Process Materials Postprocess Materials Postprocess Materials Postprocess Materials Postprocess Materials Chromatic Aberration
Материал постобработки post_color_correction    Chromatic Aberration Chromatic Aberration Материал постобработки post_color_correction    Материал постобработки post_color_correction    Материал постобработки Материал постобработки post_color_correction Film Grain Film Grain Film Grain Screen Space Reflections
SSR Screen Space Reflections Screen Space Reflections SSR SSR SSR SSR Screen-Space Ambient Occlusion
Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen-Space Ambient Occlusion Screen Space Global Illumination
SSRTGI Screen Space Global Illumination Screen Space Global Illumination SSRTGI SSRTGI SSRTGI SSRTGI Contact Shadows
Screen Space Shadows Contact Shadows Contact Shadows Screen Space Shadows Screen Space Shadows Screen Space Shadows Screen Space Shadows Motion Blur
Motion Blur Motion Blur Motion Blur Motion Blur Motion Blur Motion Blur Motion Blur Screen Percentage
Supersampling Screen Percentage Screen Percentage Supersampling Supersampling Supersampling Supersampling  На этом пока все. Напоминаем, что это — лишь первый, обобщенный выпуск из запланированных трех по миграции с Unreal Engine 4. Следующий выпуск будет более специализированным и расскажет про миграцию на UNIGINE с точки зрения 3D-художника. А в последнем разберем все важные моменты по этому вопросу для программистов. Чтобы получить доступ к бесплатной версии UNIGINE 2 Community заполните форму на нашем сайте. форму форму Все комплектации UNIGINE: Community — базовая версия для любителей и независимых разработчиков. Достаточна для разработки видеоигр большинства популярных жанров (включая VR).
Engineering — расширенная, специализированная версия. Включает множество заготовок для инженерных задач.
Sim — максимальная версия платформы под масштабные проекты (размеров планеты и даже больше) с готовыми механизмами симуляции. Community — базовая версия для любителей и независимых разработчиков. Достаточна для разработки видеоигр большинства популярных жанров (включая VR). Community — базовая версия для любителей и независимых разработчиков. Достаточна для разработки видеоигр большинства популярных жанров (включая VR). Community Engineering — расширенная, специализированная версия. Включает множество заготовок для инженерных задач. Engineering — расширенная, специализированная версия. Включает множество заготовок для инженерных задач. Engineering Sim — максимальная версия платформы под масштабные проекты (размеров планеты и даже больше) с готовыми механизмами симуляции. Sim — максимальная версия платформы под масштабные проекты (размеров планеты и даже больше) с готовыми механизмами симуляции. Sim Подробнее о комплектациях и ценах Подробнее о комплектациях и ценах Подробнее о комплектациях и ценах Подробнее о комплектациях и ценах ]]></text>
</doc>

<?xml version="1.0" ?>
<doc>
	<label auto="true" type="str" verify="true"><![CDATA[Develop]]></label>
	<author auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Prikalel]]></item>
	</author>
	<date auto="true" type="str" verify="true"><![CDATA[2022-12-03, 21:01]]></date>
	<link auto="true" type="str" verify="true"><![CDATA[https://habr.com/ru/post/701738/]]></link>
	<title auto="true" type="str" verify="true"><![CDATA[GitLab self-instance on RedOs]]></title>
	<categories auto="true" type="list" verify="true">
		<item type="str"><![CDATA[Настройка Linux]]></item>
		<item type="str"><![CDATA[Git]]></item>
	</categories>
	<key_words auto="true" type="list" verify="true">
		<item type="str"><![CDATA[RedOs]]></item>
		<item type="str"><![CDATA[gitlab]]></item>
		<item type="str"><![CDATA[nginx]]></item>
	</key_words>
	<text auto="true" type="str" verify="true"><![CDATA[Abstract
Представим ситуацию - вы - прошаренный разработчик-сисадмин, просыпаетесь утром, пьёте кофе, на улице поют птички, ничего не предвещает беды. Как вдруг, откуда ни возьмись, появляется босс и требует, чтобы вы срочно подняли GitLab на корпоративном сервере. А на сервере стоит RedOs. Первое что приходит в голову: "А давайте переустановим на что-нибудь другое?" Но за такое вас уволят. Что ж...
В этом непродолжительном туторе настроим свой GitLab на отечественной операционной системе RedOs. Иногда будем ссылаться на уже имеющийся туториал. Если вы не знаете, что такое свой GitLab или какие преимущества он даёт, - обращайтесь к нему. Также есть другая статья (очень хорошая, недавно вышла, для ubuntu-юзеров) на хабре, к которой тоже можно обращаться.
Чем этот материал отличается от другого в интернете?
Способы установки
Вы можете поставить GitLab множеством различных способов. Но разберём основные 3:
Метод
Плюсы
Минусы
Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее.
Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет.
Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile.
Пойдём по второму пути.
Почему установка из сурсов - это боль?
Что надо?
Сервер с проброшенными портами и белым ip, на котором можно поставить (или он уже стоит) RedOs (чисто технически, если там CentOs или Redhat, то тоже норм). Желательно, чтобы на нём было минимум 2 ядра CPU и 2 Гб оперативы.
Домен.
Уметь пользоваться терминалом.
Возможность настраивать dns-записи у своего провайдера домена. gitlab.mydomain.com должен указывать на внешний ip вашего сервера.
Умение управлять корпоративной почтой в панели своего провайдера.
Подготовительный этап
Если у вас ещё нету ОС, то самое время передумать поставить её. На комп, который будет использоваться как сервер, поставьте ОС. Во время установки выбирайте сервер-минимальный. Дополнительно сразу отметим некоторые пакеты для установки:
Средства контроля производительности,
Python,
Библиотеки совместимости,
Контрольные средства интернета,
Средства разработки,
Средства администрирования.
Созданного юзера добавляем в группу wheel, чтобы он мог пользоваться sudo -i. Сразу после установки можно поставить самую свежую версию ядра: dnf upgrade.
Чтобы уметь прокручивать историю терминала, а также копи-пастить команды, быстренько настраиваем ssh-подключение по ключу с другого устройства, у которого есть браузер и графическая оболочка. Если вам говорят, что подключение к серверу происходит впервые и что неплохо бы добавить ключ сервера в .ssh/known_host, то верность отпечатка можно проверить, выполнив команду на сервере:
ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub
Как только настроили, удаляем возможность подключения по паролю:
vim /etc/ssh/sshd_config  # Или любой другой терминальный редактор.
PasswordAuthentication no  # Найти эту сторку и установить в `no`.
Если не сказано иного, все остальные команды выполняются на сервере от имени суперпользователя.
Почта
Настроим postfix. Поставим сразу дополнительно парочку важных пакетов и, например, докер.
yum install postfix docker-ce curl policycoreutils-python "libcrypt.so.1()(64bit)"
Если бы мы ставили на Debian или Ubuntu, нам бы высветилось окошко с возможностью первоначальной конфигурацией smtp-менеджера. В нашем случае - настройка через relay- (smart-) host. Открываем и редактируем файл конфигурации /etc/postfix/main.cf.
Конфигурация, если ваш smart-host - это mail.ru для бизнеса.
Теперь можете проверить работу почты:
echo "Subject: hello" | sendmail.postfix other-sendbox@mail.ru
# На other-sendbox@mail.ru почта приходит мгновенно.
# Если не пришла, значит вы что-то неправильно сделали. Посмотреть лог:
cat /var/log/maillog
Если вы часто выключаете и включаете сервер:
Установка certbot
Все мы любим https за то, что в браузерах рядом с нашим сайтом есть зелёный щит или значок замка́. Чтобы воспользоваться такой возможностью, надо поставить certbot, который в будущем поможет нам получить сертификаты от letsencrypt. По официальной документации его можно поставить через snapd.
dnf install snapd -y
systemctl enable --now snapd.socket
sleep 20  # Подождать пару сек, потому что может кинуть "error: too early for operation, device not yet seeded or device model not acknowledged"
snap install core
ln -s /var/lib/snapd/snap /snap
snap install --classic certbot
# certbot 1.32.0 from Certbot Project (certbot-eff✓) installed
БД
Для GitLab требуется redis и postgresql. Лучше поставить 12 версию.
yum install redis postgresql-server
postgresql-setup initdb  # Обязательно, без этого БД с ходу не будет работать.
systemctl enable postgresql 
systemctl start postgresql 
systemctl status postgresql
# Проверим, что можно подключиться... Откроем терминал postgres:
sudo -u postgres psql 
\l
## Покажет таблицу
exit ## Выйти обратно в терминал
GitLab
Теперь всё готово. Выполняем скрипт:
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo os=centos dist=7 bash
Чтобы обмануть систему говорим ему, что пользуемся не отечественной ОС, а иностранной.
Потом ставим сам пакет, указав домен. Через переменную окружения можно передать начальный пароль администратора.
EXTERNAL_URL="http://gitlab.mydomain.com" GITLAB_ROOT_PASSWORD="gitlab_root_password" yum install gitlab-ce
Если вы имели бэкап (версии той же, что и установили), можете его применить.
А после установки надо подправить файл /etc/gitlab/gitlab.rb (почитайте какие настройки там есть и подредачьте их), потом выполните gitlab-ctl reconfigure.Минимум один раз перед загрузкой бэкапа реконфигурацию надо сделать.
HTTPS
Можете попробовать автоматическое получение сертификатов через letsencrypt['enable'] = true, но у меня он не сработал.
Ok, если надо получить сертификаты, есть два сценария - во-первых, на один ваш домен, во-вторых, на wildcard-домены типа таких, какие нужны для GitLab Pages. В процессе от вас в любом случае потребуют добавить dns-запись, которая после выгрузки зоны распространится не сразу. Проверить, появились ли dns-записи на вашем сайте, можно при помощи онлайн-утилит, например, таких. Команда получения сертификата для одного домена примерно такая:
certbot certonly --standalone --agree-tos --preferred-challenges http -d gitlab.mydomain.com
Для pages.mydomain.com ситуация немного другая. Для каждого пользователя, который будет создавать свой GitLab Page, будет выделен поддомен, а статические файлы будут хоститься на username.pages.mydomain.com/project-name. Есть прекрасная статья, где говорится, как получать wildcard-сертификаты:
certbot --manual --agree-tos --manual-public-ip-logging-ok --preferred-challenges dns certonly --server https://acme-v02.api.letsencrypt.org/directory -d *.pages.mydomain.com -d pages.mydomain.com
Все сертификаты сохраняются в /etc/letsencrypt/live/subdomain.mydomain.com/*.pem. Нас интересуют файлы fullchain.pem и privkey.pem. Их надо переместить в нужную папку, чтобы GitLab их увидел. Ключ -L добавляем, потому что в указанных папках лежат символьные ссылки на ../../archive.
cp -L /etc/letsencrypt/live/gitlab.mydomain.com/fullchain.pem /etc/gitlab/ssl/gitlab.mydomain.com.crt
cp -L /etc/letsencrypt/live/gitlab.mydomain.com/privkey.pem /etc/gitlab/ssl/gitlab.mydomain.com.key
cp -L /etc/letsencrypt/live/pages.mydomain.com/fullchain.pem /etc/gitlab/ssl/pages.mydomain.com.crt
cp -L /etc/letsencrypt/live/pages.mydomain.com/privkey.pem /etc/gitlab/ssl/pages.mydomain.com.key
chmod -R go+r /etc/gitlab/ssl/  # Чтобы он 100% смог их прочитать.
Пример файла конфигурации gitlab.rb:
Кофигурируем, перезапускаем, проверяем:
gitlab-ctl reconfigure && gitlab-ctl restart && sleep 120 && gitlab-rake gitlab:check
Задержка нужна, потому что сразу gitlab-shell не поднимется и ему нужно раскачаться. Если запустить проверку сразу после перезапуска, у вас не всё будет так гладко, как если бы вы проверили то же самое, но через некоторое время.
Если у вас в локальной сети есть ещё компьютеры, и вы хотите с них зайти на свой сайт, то существуют два пути решения проблемы: поднять свой dns-сервер или на каждой локальной машине, подключённой к тому же роутеру, что и сервер, редактировать файл /etc/hosts:
127.0.0.1     localhost
192.168.31.84   gitlab.mydomain.com  # Локальный ip вашего сервера.
Теперь можете заходить на gitlab.mydomain.com с логином root и паролем, который указали при установке.
Проверка GitLab
Чтобы проверить, что всё идеально работает, осталось совсем немного.
Ошибка permission denied (publickey,keyboard-interactive).
Защита файервол!
Сейчас любой в интернете может зарегистрироваться как новый пользователь. Чтобы избежать проблем заходим в админ-панель, Settings -> General -> Sign-up restrictions -> Allowed domains for sign-ups. Установите ограничение только на почту в вашем домене, пролистайте чуть ниже и сохраните изменения.
По умолчанию должен был быть создан репозиторий Monitoring, попробуйте его склонировать на другом компьютере, предварительно добавив ssh-ключи в аккаунт. Добавьте парочку файлов, сделайте коммит и пуш. Проверьте, что ваши изменения есть на сайте.
Этой конфигурации может быть достаточно для большинства нужд. Можете настроить gitlab-runners и проверить GitLab Ci/Cd, гайдов по этому в интернете полным-полно.
Ну а мы пойдём немного дальше, добавим конфигурацию nginx.
NGINX
yum install nginx
В конфигурации GitLab не забудьте отключить nginx: nginx['enable'] = false. По умолчанию создаётся юзер nginx для подключения к файлам самим сервисом. В конфиге GitLab надо добавить этого юзера: web_server['external_users'] = ['nginx', 'gitlab-www', 'git'].
Для настройки nginx конфига его надо скачать (вот это поворот, да?). Есть разница в том, что в RedOs нету папок sites-available и sites-enabled, тут только /etc/nginx/conf.d/, куда надо класть файлы с расширением .conf. Также имеет смысл зайти в основной файл (vim /etc/nginx/nginx.conf), который будет эти конфиги подтягивать, и удалить там дефолтный server-блок (если, конечно, вы не собираетесь хостить на этом сервере ещё что-нибудь). Кладём конфиг nginx в нужное место:
wget https://gitlab.com/gitlab-org/gitlab-recipes/-/raw/master/web-server/nginx/gitlab-omnibus-ssl-nginx.conf?inline=false
mv gitlab-omnibus-ssl-nginx.conf\?inline\=false  /etc/nginx/conf.d/gitlab.conf
vim /etc/nginx/conf.d/gitlab.conf  # Или любой другой редактор.
Заменяем YOUR_SERVER_FQDN на свой домен, где будет крутиться GitLab, например gitlab.mydomain.com. Кста, ещё можно и путь к сертификатам указать! Аргументы ipv6only=on можете сразу удалять, сейчас они не поддерживаются. Ещё там есть строка ssl on, поскольку этот конфиг создавался 2 года назад, сейчас уже всё по-другому, эту строку тоже можно удалить (иначе nginx выкинет предупреждение).
listen 0.0.0.0:80;
listen [::]:80;
server_name gitlab.mydomain.com;
...
ssl_certificate /etc/gitlab/ssl/gitlab.mydomain.com.crt;
ssl_certificate_key /etc/gitlab/ssl/gitlab.mydomain.com.key;
Проверьте, что ваш конфиг нормальный nginx -t и перезапустите сервис: nginx -s reload. Но перед этим убедитесь, что конфиг вашего GitLab соответствует действительности и перезапустите его тоже, если что-то там меняли (команду для перезапуска GitLab см. выше).
Ошибка Address already in use.
Немного подредактируем конфиг nginx.
Если после всего этого счастья вы получаете 502 bad gateway:
Спасибо большое, что пролистали прочитали до конца! Желаю вам приятных снов, хорошего настроения и крепких нервов. Встретимся в следующем туторе (или статье)! Abstract Представим ситуацию - вы - прошаренный разработчик-сисадмин, просыпаетесь утром, пьёте кофе, на улице поют птички, ничего не предвещает беды. Как вдруг, откуда ни возьмись, появляется босс и требует, чтобы вы срочно подняли GitLab на корпоративном сервере. А на сервере стоит RedOs. Первое что приходит в голову: "А давайте переустановим на что-нибудь другое?" Но за такое вас уволят. Что ж... В этом непродолжительном туторе настроим свой GitLab на отечественной операционной системе RedOs. Иногда будем ссылаться на уже имеющийся туториал. Если вы не знаете, что такое свой GitLab или какие преимущества он даёт, - обращайтесь к нему. Также есть другая статья (очень хорошая, недавно вышла, для ubuntu-юзеров) на хабре, к которой тоже можно обращаться. RedOs туториал свой на хабре Чем этот материал отличается от другого в интернете? Чем этот материал отличается от другого в интернете?             Способы установки Вы можете поставить GitLab множеством различных способов. Но разберём основные 3: способов Метод
Плюсы
Минусы
Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее.
Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет.
Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Метод
Плюсы
Минусы
Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее.
Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет.
Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Метод
Плюсы
Минусы
Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее.
Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет.
Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Метод
Плюсы
Минусы
Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее.
Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет.
Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Метод
Плюсы
Минусы Метод Метод Метод Плюсы Плюсы Плюсы Минусы Минусы Минусы Из исходников
[Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить.
Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее. Из исходников Из исходников [Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить. [Вроде бы] бóльшая скорость и более быстрый отклик сервера. Возможность залезть в код и посмотреть, как там всё устроено, отдебажить. Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее. Очень долгий процесс установки, состоящий из многих пунктов. В любой момент всё может пойти не по плану. Одна ошибка вызывает другую, та вызывает третью - и так далее. Пакет от Omnibus
Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так.
Чуть меньшая скорость отклика. В основном минусов нет. Пакет от Omnibus Пакет от Omnibus Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так. Мгновенная установка одной командой. Удобный способ настройки и конфигурации, а также управление сервисом. Обширная база решений проблем в случае, если что-то пойдет не так. Чуть меньшая скорость отклика. В основном минусов нет. Чуть меньшая скорость отклика. В основном минусов нет. Docker image
Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать.
Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Docker image Docker image Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать. Настройка портов, включение в облаке, автоматическое поднятие, если он упал и т.п. Я не особо пользовался, так что тут мало что могу сказать. Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. Неочевидная настройка своих https сертификатов, а главный минус: отсутствие smtp менеджера. Если вы хотите postfix, вам придётся или пользоваться docker-compose или собирать образ из своего Dockerfile. https postfix docker-compose Dockerfile Пойдём по второму пути. Почему установка из сурсов - это боль? Почему установка из сурсов - это боль?                 Что надо? Сервер с проброшенными портами и белым ip, на котором можно поставить (или он уже стоит) RedOs (чисто технически, если там CentOs или Redhat, то тоже норм). Желательно, чтобы на нём было минимум 2 ядра CPU и 2 Гб оперативы.
Домен.
Уметь пользоваться терминалом.
Возможность настраивать dns-записи у своего провайдера домена. gitlab.mydomain.com должен указывать на внешний ip вашего сервера.
Умение управлять корпоративной почтой в панели своего провайдера. Сервер с проброшенными портами и белым ip, на котором можно поставить (или он уже стоит) RedOs (чисто технически, если там CentOs или Redhat, то тоже норм). Желательно, чтобы на нём было минимум 2 ядра CPU и 2 Гб оперативы. Сервер с проброшенными портами и белым ip, на котором можно поставить (или он уже стоит) RedOs (чисто технически, если там CentOs или Redhat, то тоже норм). Желательно, чтобы на нём было минимум 2 ядра CPU и 2 Гб оперативы. Домен. Домен. Уметь пользоваться терминалом. Уметь пользоваться терминалом. Возможность настраивать dns-записи у своего провайдера домена. gitlab.mydomain.com должен указывать на внешний ip вашего сервера. Возможность настраивать dns-записи у своего провайдера домена. gitlab.mydomain.com должен указывать на внешний ip вашего сервера. dns-записи gitlab.mydomain.com Умение управлять корпоративной почтой в панели своего провайдера. Умение управлять корпоративной почтой в панели своего провайдера. панели своего провайдера Подготовительный этап Если у вас ещё нету ОС, то самое время передумать поставить её. На комп, который будет использоваться как сервер, поставьте ОС. Во время установки выбирайте сервер-минимальный. Дополнительно сразу отметим некоторые пакеты для установки: ОС передумать ОС Средства контроля производительности,
Python,
Библиотеки совместимости,
Контрольные средства интернета,
Средства разработки,
Средства администрирования. Средства контроля производительности, Средства контроля производительности, Python, Python, Библиотеки совместимости, Библиотеки совместимости, Контрольные средства интернета, Контрольные средства интернета, Средства разработки, Средства разработки, Средства администрирования. Средства администрирования. Созданного юзера добавляем в группу wheel, чтобы он мог пользоваться sudo -i. Сразу после установки можно поставить самую свежую версию ядра: dnf upgrade. wheel sudo -i dnf upgrade Чтобы уметь прокручивать историю терминала, а также копи-пастить команды, быстренько настраиваем ssh-подключение по ключу с другого устройства, у которого есть браузер и графическая оболочка. Если вам говорят, что подключение к серверу происходит впервые и что неплохо бы добавить ключ сервера в .ssh/known_host, то верность отпечатка можно проверить, выполнив команду на сервере: ssh-подключение .ssh/known_host ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub Как только настроили, удаляем возможность подключения по паролю: vim /etc/ssh/sshd_config  # Или любой другой терминальный редактор.
PasswordAuthentication no  # Найти эту сторку и установить в `no`. vim /etc/ssh/sshd_config  # Или любой другой терминальный редактор.
PasswordAuthentication no  # Найти эту сторку и установить в `no`. Если не сказано иного, все остальные команды выполняются на сервере от имени суперпользователя. Почта Настроим postfix. Поставим сразу дополнительно парочку важных пакетов и, например, докер. postfix yum install postfix docker-ce curl policycoreutils-python "libcrypt.so.1()(64bit)" yum install postfix docker-ce curl policycoreutils-python "libcrypt.so.1()(64bit)" Если бы мы ставили на Debian или Ubuntu, нам бы высветилось окошко с возможностью первоначальной конфигурацией smtp-менеджера. В нашем случае - настройка через relay- (smart-) host. Открываем и редактируем файл конфигурации /etc/postfix/main.cf. relay- (smart-) host /etc/postfix/main.cf Конфигурация, если ваш smart-host - это mail.ru для бизнеса. Конфигурация, если ваш smart-host - это mail.ru для бизнеса.                           Теперь можете проверить работу почты: echo "Subject: hello" | sendmail.postfix other-sendbox@mail.ru
# На other-sendbox@mail.ru почта приходит мгновенно.
# Если не пришла, значит вы что-то неправильно сделали. Посмотреть лог:
cat /var/log/maillog echo "Subject: hello" | sendmail.postfix other-sendbox@mail.ru
# На other-sendbox@mail.ru почта приходит мгновенно.
# Если не пришла, значит вы что-то неправильно сделали. Посмотреть лог:
cat /var/log/maillog Если вы часто выключаете и включаете сервер: Если вы часто выключаете и включаете сервер:        Установка certbot Все мы любим https за то, что в браузерах рядом с нашим сайтом есть зелёный щит или значок замка́. Чтобы воспользоваться такой возможностью, надо поставить certbot, который в будущем поможет нам получить сертификаты от letsencrypt. По официальной документации его можно поставить через snapd. а́ certbot letsencrypt официальной документации snapd dnf install snapd -y
systemctl enable --now snapd.socket
sleep 20  # Подождать пару сек, потому что может кинуть "error: too early for operation, device not yet seeded or device model not acknowledged"
snap install core
ln -s /var/lib/snapd/snap /snap
snap install --classic certbot
# certbot 1.32.0 from Certbot Project (certbot-eff✓) installed dnf install snapd -y
systemctl enable --now snapd.socket
sleep 20  # Подождать пару сек, потому что может кинуть "error: too early for operation, device not yet seeded or device model not acknowledged"
snap install core
ln -s /var/lib/snapd/snap /snap
snap install --classic certbot
# certbot 1.32.0 from Certbot Project (certbot-eff✓) installed БД Для GitLab требуется redis и postgresql. Лучше поставить 12 версию. redis postgresql postgresql yum install redis postgresql-server
postgresql-setup initdb  # Обязательно, без этого БД с ходу не будет работать.
systemctl enable postgresql 
systemctl start postgresql 
systemctl status postgresql
# Проверим, что можно подключиться... Откроем терминал postgres:
sudo -u postgres psql 
\l
## Покажет таблицу
exit ## Выйти обратно в терминал yum install redis postgresql-server
postgresql-setup initdb  # Обязательно, без этого БД с ходу не будет работать.
systemctl enable postgresql 
systemctl start postgresql 
systemctl status postgresql
# Проверим, что можно подключиться... Откроем терминал postgres:
sudo -u postgres psql 
\l
## Покажет таблицу
exit ## Выйти обратно в терминал GitLab Теперь всё готово. Выполняем скрипт: скрипт curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo os=centos dist=7 bash curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo os=centos dist=7 bash Чтобы обмануть систему говорим ему, что пользуемся не отечественной ОС, а иностранной. Потом ставим сам пакет, указав домен. Через переменную окружения можно передать начальный пароль администратора. EXTERNAL_URL="http://gitlab.mydomain.com" GITLAB_ROOT_PASSWORD="gitlab_root_password" yum install gitlab-ce EXTERNAL_URL="http://gitlab.mydomain.com" GITLAB_ROOT_PASSWORD="gitlab_root_password" yum install gitlab-ce Если вы имели бэкап (версии той же, что и установили), можете его применить. применить А после установки надо подправить файл /etc/gitlab/gitlab.rb (почитайте какие настройки там есть и подредачьте их), потом выполните gitlab-ctl reconfigure.Минимум один раз перед загрузкой бэкапа реконфигурацию надо сделать. /etc/gitlab/gitlab.rb gitlab-ctl reconfigure. HTTPS Можете попробовать автоматическое получение сертификатов через letsencrypt['enable'] = true, но у меня он не сработал. автоматическое получение сертификатов letsencrypt['enable'] = true Ok, если надо получить сертификаты, есть два сценария - во-первых, на один ваш домен, во-вторых, на wildcard-домены типа таких, какие нужны для GitLab Pages. В процессе от вас в любом случае потребуют добавить dns-запись, которая после выгрузки зоны распространится не сразу. Проверить, появились ли dns-записи на вашем сайте, можно при помощи онлайн-утилит, например, таких. Команда получения сертификата для одного домена примерно такая: один wildcard таких одного certbot certonly --standalone --agree-tos --preferred-challenges http -d gitlab.mydomain.com certbot certonly --standalone --agree-tos --preferred-challenges http -d gitlab.mydomain.com Для pages.mydomain.com ситуация немного другая. Для каждого пользователя, который будет создавать свой GitLab Page, будет выделен поддомен, а статические файлы будут хоститься на username.pages.mydomain.com/project-name. Есть прекрасная статья, где говорится, как получать wildcard-сертификаты: pages.mydomain.com username.pages.mydomain.com/project-name прекрасная статья wildcard- certbot --manual --agree-tos --manual-public-ip-logging-ok --preferred-challenges dns certonly --server https://acme-v02.api.letsencrypt.org/directory -d *.pages.mydomain.com -d pages.mydomain.com certbot --manual --agree-tos --manual-public-ip-logging-ok --preferred-challenges dns certonly --server https://acme-v02.api.letsencrypt.org/directory -d *.pages.mydomain.com -d pages.mydomain.com Все сертификаты сохраняются в /etc/letsencrypt/live/subdomain.mydomain.com/*.pem. Нас интересуют файлы fullchain.pem и privkey.pem. Их надо переместить в нужную папку, чтобы GitLab их увидел. Ключ -L добавляем, потому что в указанных папках лежат символьные ссылки на ../../archive. /etc/letsencrypt/live/subdomain.mydomain.com/*.pem fullchain.pem privkey.pem Ключ -L ../../archive cp -L /etc/letsencrypt/live/gitlab.mydomain.com/fullchain.pem /etc/gitlab/ssl/gitlab.mydomain.com.crt
cp -L /etc/letsencrypt/live/gitlab.mydomain.com/privkey.pem /etc/gitlab/ssl/gitlab.mydomain.com.key
cp -L /etc/letsencrypt/live/pages.mydomain.com/fullchain.pem /etc/gitlab/ssl/pages.mydomain.com.crt
cp -L /etc/letsencrypt/live/pages.mydomain.com/privkey.pem /etc/gitlab/ssl/pages.mydomain.com.key
chmod -R go+r /etc/gitlab/ssl/  # Чтобы он 100% смог их прочитать. cp -L /etc/letsencrypt/live/gitlab.mydomain.com/fullchain.pem /etc/gitlab/ssl/gitlab.mydomain.com.crt
cp -L /etc/letsencrypt/live/gitlab.mydomain.com/privkey.pem /etc/gitlab/ssl/gitlab.mydomain.com.key
cp -L /etc/letsencrypt/live/pages.mydomain.com/fullchain.pem /etc/gitlab/ssl/pages.mydomain.com.crt
cp -L /etc/letsencrypt/live/pages.mydomain.com/privkey.pem /etc/gitlab/ssl/pages.mydomain.com.key
chmod -R go+r /etc/gitlab/ssl/  # Чтобы он 100% смог их прочитать. Пример файла конфигурации gitlab.rb: Пример файла конфигурации gitlab.rb:     Кофигурируем, перезапускаем, проверяем: Кофигурируем проверяем gitlab-ctl reconfigure && gitlab-ctl restart && sleep 120 && gitlab-rake gitlab:check gitlab-ctl reconfigure && gitlab-ctl restart && sleep 120 && gitlab-rake gitlab:check Задержка нужна, потому что сразу gitlab-shell не поднимется и ему нужно раскачаться. Если запустить проверку сразу после перезапуска, у вас не всё будет так гладко, как если бы вы проверили то же самое, но через некоторое время. gitlab-shell Если у вас в локальной сети есть ещё компьютеры, и вы хотите с них зайти на свой сайт, то существуют два пути решения проблемы: поднять свой dns-сервер или на каждой локальной машине, подключённой к тому же роутеру, что и сервер, редактировать файл /etc/hosts: /etc/hosts 127.0.0.1     localhost
192.168.31.84   gitlab.mydomain.com  # Локальный ip вашего сервера. 127.0.0.1     localhost
192.168.31.84   gitlab.mydomain.com  # Локальный ip вашего сервера. Теперь можете заходить на gitlab.mydomain.com с логином root и паролем, который указали при установке. gitlab.mydomain.com root Проверка GitLab Чтобы проверить, что всё идеально работает, осталось совсем немного. Ошибка permission denied (publickey,keyboard-interactive). Ошибка permission denied (publickey,keyboard-interactive).           Защита файервол! Защита файервол!          Сейчас любой в интернете может зарегистрироваться как новый пользователь. Чтобы избежать проблем заходим в админ-панель, Settings -> General -> Sign-up restrictions -> Allowed domains for sign-ups. Установите ограничение только на почту в вашем домене, пролистайте чуть ниже и сохраните изменения. Settings -> General -> Sign-up restrictions -> Allowed domains for sign-ups По умолчанию должен был быть создан репозиторий Monitoring, попробуйте его склонировать на другом компьютере, предварительно добавив ssh-ключи в аккаунт. Добавьте парочку файлов, сделайте коммит и пуш. Проверьте, что ваши изменения есть на сайте. Monitoring добавив ssh-ключи Этой конфигурации может быть достаточно для большинства нужд. Можете настроить gitlab-runners и проверить GitLab Ci/Cd, гайдов по этому в интернете полным-полно. gitlab-runners в интернете Ну а мы пойдём немного дальше, добавим конфигурацию nginx. NGINX yum install nginx yum install nginx В конфигурации GitLab не забудьте отключить nginx: nginx['enable'] = false. По умолчанию создаётся юзер nginx для подключения к файлам самим сервисом. В конфиге GitLab надо добавить этого юзера: web_server['external_users'] = ['nginx', 'gitlab-www', 'git']. не забудьте nginx nginx['enable'] = false. nginx web_server['external_users'] = ['nginx', 'gitlab-www', 'git']. Для настройки nginx конфига его надо скачать (вот это поворот, да?). Есть разница в том, что в RedOs нету папок sites-available и sites-enabled, тут только /etc/nginx/conf.d/, куда надо класть файлы с расширением .conf. Также имеет смысл зайти в основной файл (vim /etc/nginx/nginx.conf), который будет эти конфиги подтягивать, и удалить там дефолтный server-блок (если, конечно, вы не собираетесь хостить на этом сервере ещё что-нибудь). Кладём конфиг nginx в нужное место: скачать вот это поворот, да? sites-available sites-enabled /etc/nginx/conf.d/ .conf vim /etc/nginx/nginx.conf wget https://gitlab.com/gitlab-org/gitlab-recipes/-/raw/master/web-server/nginx/gitlab-omnibus-ssl-nginx.conf?inline=false
mv gitlab-omnibus-ssl-nginx.conf\?inline\=false  /etc/nginx/conf.d/gitlab.conf
vim /etc/nginx/conf.d/gitlab.conf  # Или любой другой редактор. wget https://gitlab.com/gitlab-org/gitlab-recipes/-/raw/master/web-server/nginx/gitlab-omnibus-ssl-nginx.conf?inline=false
mv gitlab-omnibus-ssl-nginx.conf\?inline\=false  /etc/nginx/conf.d/gitlab.conf
vim /etc/nginx/conf.d/gitlab.conf  # Или любой другой редактор. Заменяем YOUR_SERVER_FQDN на свой домен, где будет крутиться GitLab, например gitlab.mydomain.com. Кста, ещё можно и путь к сертификатам указать! Аргументы ipv6only=on можете сразу удалять, сейчас они не поддерживаются. Ещё там есть строка ssl on, поскольку этот конфиг создавался 2 года назад, сейчас уже всё по-другому, эту строку тоже можно удалить (иначе nginx выкинет предупреждение). YOUR_SERVER_FQDN gitlab.mydomain.com ipv6only=on ssl on listen 0.0.0.0:80;
listen [::]:80;
server_name gitlab.mydomain.com;
...
ssl_certificate /etc/gitlab/ssl/gitlab.mydomain.com.crt;
ssl_certificate_key /etc/gitlab/ssl/gitlab.mydomain.com.key; listen 0.0.0.0:80;
listen [::]:80;
server_name gitlab.mydomain.com;
...
ssl_certificate /etc/gitlab/ssl/gitlab.mydomain.com.crt;
ssl_certificate_key /etc/gitlab/ssl/gitlab.mydomain.com.key; Проверьте, что ваш конфиг нормальный nginx -t и перезапустите сервис: nginx -s reload. Но перед этим убедитесь, что конфиг вашего GitLab соответствует действительности и перезапустите его тоже, если что-то там меняли (команду для перезапуска GitLab см. выше). nginx -t nginx -s reload Ошибка Address already in use. Ошибка Address already in use.      Немного подредактируем конфиг nginx. Немного подредактируем конфиг nginx.          Если после всего этого счастья вы получаете 502 bad gateway: Если после всего этого счастья вы получаете 502 bad gateway:                               Спасибо большое, что пролистали прочитали до конца! Желаю вам приятных снов, хорошего настроения и крепких нервов. Встретимся в следующем туторе (или статье)! пролистали крепких нервов ]]></text>
</doc>
